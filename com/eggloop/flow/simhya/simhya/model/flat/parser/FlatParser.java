/* Generated By:JavaCC: Do not edit this line. FlatParser.java */
package com.eggloop.flow.simhya.simhya.model.flat.parser;

import com.eggloop.flow.simhya.simhya.model.store.*;
import com.eggloop.flow.simhya.simhya.model.store.faststore.*;
import com.eggloop.flow.simhya.simhya.model.transition.*;
import com.eggloop.flow.simhya.simhya.model.flat.*;
import com.eggloop.flow.simhya.simhya.matheval.Expression;
import com.eggloop.flow.simhya.simhya.matheval.SymbolArray;

import java.util.ArrayList;


public class FlatParser implements FlatParserConstants {
    private FastStore store;
    private FlatModel model;
    private FlatTemplate template;
    private boolean parsingTemplate;
    private ArrayList<String> uniqueNames;
    private boolean useDots;

    public FlatParser() {
        this(new java.io.StringReader(""));
    }

    public FlatModel parseFromString( String modelDef ) throws ParseException, TokenMgrError, NumberFormatException {
        model = null;
        parsingTemplate = false;
        template = null;
        uniqueNames = new ArrayList<String>();
        useDots = false;
        this.ReInit(new java.io.StringReader(modelDef));
        this.Start();
        return model;
    }

    public FlatModel parseFromFile( String filename ) throws ParseException, TokenMgrError, NumberFormatException {
        model = null;
        parsingTemplate = false;
        template = null;
        useDots = false;
        uniqueNames = new ArrayList<String>();
        try { this.ReInit(new java.io.FileReader(filename)); }
        catch(java.io.IOException e) {throw new ParseException("Error while opening file " + filename + ": " + e); }
        this.Start();
        return model;
    }

    public FlatModel parseFromStringWithDots( String modelDef ) throws ParseException, TokenMgrError, NumberFormatException {
        model = null;
        parsingTemplate = false;
        template = null;
        uniqueNames = new ArrayList<String>();
        useDots = true;
        this.ReInit(new java.io.StringReader(modelDef));
        this.Start();
        return model;
    }

    public FlatModel parseFromFileWithDots( String filename ) throws ParseException, TokenMgrError, NumberFormatException {
        model = null;
        parsingTemplate = false;
        template = null;
        useDots = true;
        uniqueNames = new ArrayList<String>();
        try { this.ReInit(new java.io.FileReader(filename)); }
        catch(java.io.IOException e) {throw new ParseException("Error while opening file " + filename + ": " + e); }
        this.Start();
        return model;
    }



    private boolean isBlank(String s) {
        for (int i=0;i<s.length();i++)
            if (s.charAt(i) != ' ' && s.charAt(i) != '\u0009')
                return false;
        return true;
    }

    private void checkDots(String s) throws ParseException {
        if (!useDots && s.contains("."))
            throw new ParseException("Symbol " + s + " cannot contain dots, only numbers, letters and underscores");
    }

/***********************************************
GRAMMAR RULES
***********************************************/
  final public void Start() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    String name = "stochastic_model";
    Token t;
    jj_consume_token(KEYWORD_MODEL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
           name = t.image;
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
        store = new FastStore();
        model = new FlatModel(name);
    label_1:
    while (true) {
      if (jj_2_1(1)) {
        Variable();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case KEYWORD_PARAM:
          Parameter();
          break;
        case KEYWORD_FUNCTION:
          Function();
          break;
        case KEYWORD_EXPRESSION:
          Expression();
          break;
        case KEYWORD_TEMPLATE:
          Template();
          break;
        case LSQ:
        case ASTERISK:
        case IDENTIFIER:
          Transition();
          break;
        case KEYWORD_LET:
          TemplateInstance();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_2(1)) {
        ;
      } else {
        break label_1;
      }
    }
    jj_consume_token(END);
    jj_consume_token(0);
        store.finalizeVariableInitialization();
        model.setStore(store);
        model.finalizeInitialization();
  }

  final public void Variable() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    String name;
    double value;
    Token t1,t2;
    Expression exp;
    if (getToken(2).kind == ASSIGN) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    t2 = jj_consume_token(MATH_EXPR);
    jj_consume_token(EOL);
        if (!parsingTemplate) {
            name = t1.image;
            checkDots(name);
            try { exp = store.parseExpression(t2.image); }
                catch(Exception e) {
                    {if (true) throw new ParseException("Cannot parse expression defining variable " + t1.image + ", which equals " + t2.image + "\u005cn" + e.getMessage());}
                }
            value = exp.computeValue();
            try { if (exp.isNumericConstant()) store.addVariable(name,value); else store.addVariable(name,value,exp);}
            catch(Exception e) {
                {if (true) throw new ParseException("Cannot define variable " + name +"\u005cn" + e.getMessage());}
            }
        } else {
            name = t1.image;
            checkDots(name);
            try { exp = store.parseExpression(t2.image,template.getAllLocalVariables()); }
                catch(Exception e) {
                    {if (true) throw new ParseException("Cannot parse expression defining variable " + t1.image + ", which equals " + t2.image + "\u005cn" + e.getMessage());}
                }
            value = 0;
            try { if (exp.isNumericConstant()) template.addLocalVariable(name,value);
                  else template.addLocalVariable(name,value,exp);}
            catch(Exception e) {
                {if (true) throw new ParseException("Cannot define local variable " + name +"\u005cn" + e.getMessage());}
            }
        }
  }

  final public void Parameter() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    String name;
    double value;
    Token t1,t2;
    Expression exp;
    jj_consume_token(KEYWORD_PARAM);
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    t2 = jj_consume_token(MATH_EXPR);
    jj_consume_token(EOL);
        name = t1.image;
        checkDots(name);
        try { exp = store.parseExpression(t2.image); }
            catch(Exception e) {
                {if (true) throw new ParseException("Cannot parse expression defining parameter " + t1.image + ", which equals " + t2.image + "\u005cn" + e);}
            }
        value = exp.computeValue();
        try { if (exp.isNumericConstant()) store.addParameter(name,value); else store.addParameter(name,value,exp); }
        catch(Exception e) {
            {if (true) throw new ParseException("Cannot define parameter " + name +"\u005cn" + e.getMessage());}
        }
  }

  final public void Function() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    jj_consume_token(KEYWORD_FUNCTION);
    t = jj_consume_token(MATH_EXPR);
    jj_consume_token(EOL);
        try { store.addNewFunctionDefinition(t.image); }
        catch(Exception e) {
            {if (true) throw new ParseException("Cannot add function definition " + t.image +"\u005cn" + e.getMessage());}
        }
  }

  final public void Expression() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    jj_consume_token(KEYWORD_EXPRESSION);
    t = jj_consume_token(MATH_EXPR);
    jj_consume_token(EOL);
        try { store.addNewExpressionDefinition(t.image); }
        catch(Exception e) {
            {if (true) throw new ParseException("Cannot add expression definition " + t.image +"\u005cn" + e.getMessage());}
        }
  }

  final public void Transition() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    Reset r;
    Transition trans;
    Function f;
    Predicate p;
    String name = "unnamed";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
            name = t.image;
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
        trans = new Transition(name,TType.STOCHASTIC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      jj_consume_token(ASTERISK);
            trans.setType(TType.CONTINUOUS);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(LSQ);
    p = Pred();
        trans.setGuard(new Guard(p));
    jj_consume_token(IMPLY);
    Res(trans);
    jj_consume_token(RSQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      jj_consume_token(AT);
      jj_consume_token(LBR);
      f = Func();
      jj_consume_token(RBR);
            trans.setRate(new Rate(f));
      break;
    case AT_TIME:
      jj_consume_token(AT_TIME);
      jj_consume_token(LBR);
      f = Func();
      jj_consume_token(RBR);
            trans.setType(TType.TIMED);
            trans.setTimedActivation(new TimedActivation(f));
      break;
    case AT_INF:
      jj_consume_token(AT_INF);
      jj_consume_token(LBR);
      f = Func();
      jj_consume_token(RBR);
            trans.setType(TType.INSTANTANEOUS);
            trans.setRate(new Rate(f));
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_DELAY:
      DelayDef(trans);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_CONT:
      Cont(trans);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
        if (parsingTemplate) template.addTransition(trans);
        else model.addTransition(trans);
  }

  final public void DelayDef(Transition t) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Function f;
    Predicate p;
    Reset r;
    jj_consume_token(KEYWORD_DELAY);
    jj_consume_token(LBR);
    f = Func();
    jj_consume_token(RBR);
    jj_consume_token(SEMICOLON);
    jj_consume_token(LSQ);
    p = Pred();
    jj_consume_token(IMPLY);
    r = DelayRes(t);
    jj_consume_token(RSQ);
        t.setDelay(new Delay(f),new Guard(p),r);
  }

  final public void Cont(Transition t) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Predicate p1=null,p2=null;
    jj_consume_token(KEYWORD_CONT);
    jj_consume_token(LBR);
    p1 = Pred();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON_MATH:
      jj_consume_token(SEMICOLON_MATH);
      p2 = Pred();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(RBR);
        if (t.getType() == TType.TIMED || t.getType() == TType.INSTANTANEOUS )
            {if (true) throw new ParseException("Cannot define continuity condition for a non-stochastic transition.");}
        t.setType(TType.HYBRID);
        if (p2 == null)
            t.setContinuityStatus(new ContinuityStatus(p1));
        else
            t.setContinuityStatus(new ContinuityStatus(p1,p2));
  }

  final public Reset DelayRes(Transition t) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Reset r = new Reset();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_STOP:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        AtomicReset(r);
        break;
      case KEYWORD_STOP:
        jj_consume_token(KEYWORD_STOP);
                                                t.setStoppingAfterDelay(true);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARG_SEP:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_2;
        }
        jj_consume_token(ARG_SEP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          AtomicReset(r);
          break;
        case KEYWORD_STOP:
          jj_consume_token(KEYWORD_STOP);
                                                    t.setStoppingAfterDelay(true);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public void Res(Transition t) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Reset r = new Reset();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_STOP:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        AtomicReset(r);
        break;
      case KEYWORD_STOP:
        jj_consume_token(KEYWORD_STOP);
                                                t.setStopping(true);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARG_SEP:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_3;
        }
        jj_consume_token(ARG_SEP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          AtomicReset(r);
          break;
        case KEYWORD_STOP:
          jj_consume_token(KEYWORD_STOP);
                                                    t.setStopping(true);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
        t.setReset(r);
  }

  final public void AtomicReset(Reset r) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    Function f;
    int id,id2;
    String name;
    double v;
    t1 = jj_consume_token(IDENTIFIER);
        name = t1.image;
        checkDots(name);
        if (parsingTemplate && template.isLocalVariable(name))
            id = -1;
        else {
            try {
                id = store.getVariableID(t1.image);
            }
            catch(Exception e) {
                {if (true) throw new ParseException("Variable " + t1.image + "is not defined\u005cn" + e.getMessage());}
            }
       }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RES_ASSIGN:
      jj_consume_token(RES_ASSIGN);
      f = Func();
      break;
    default:
      jj_la1[16] = jj_gen;
      if (getToken(1).kind == INCREMENT && getToken(2).kind == NUMBER) {
        jj_consume_token(INCREMENT);
        t2 = jj_consume_token(NUMBER);
            v = Double.parseDouble(t2.image);
            if (parsingTemplate)
                f = new ConstantIncrementFunction(store,name,v);
            else
                f = new ConstantIncrementFunction(store,id,v);
      } else if (getToken(1).kind == DECREMENT && getToken(2).kind == NUMBER) {
        jj_consume_token(DECREMENT);
        t2 = jj_consume_token(NUMBER);
            v = Double.parseDouble(t2.image);
            if (parsingTemplate)
                f = new ConstantIncrementFunction(store,name,-v);
            else
                f = new ConstantIncrementFunction(store,id,-v);
      } else if (getToken(1).kind == INCREMENT && getToken(2).kind == IDENTIFIER) {
        jj_consume_token(INCREMENT);
        t2 = jj_consume_token(IDENTIFIER);
            try { checkDots(t2.image); id2 = store.getParameterID(t2.image); }
            catch(Exception e) {
                {if (true) throw new ParseException("Parameter " + t2.image + "is not defined\u005cn" + e.getMessage());}
            }
            if (parsingTemplate)
                f = new ConstantParametricIncrementFunction(store,name,id2,true);
            else
                f = new ConstantParametricIncrementFunction(store,id,id2,true);
      } else if (getToken(1).kind == DECREMENT && getToken(2).kind == IDENTIFIER) {
        jj_consume_token(DECREMENT);
        t2 = jj_consume_token(IDENTIFIER);
            try { checkDots(t2.image); id2 = store.getParameterID(t2.image); }
            catch(Exception e) {
                {if (true) throw new ParseException("Parameter " + t2.image + "is not defined\u005cn" + e.getMessage());}
            }
            if (parsingTemplate)
                f = new ConstantParametricIncrementFunction(store,name,id2,false);
            else
                f = new ConstantParametricIncrementFunction(store,id,id2,false);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        r.addAtomicReset(id,name,f);
  }

  final public Predicate Pred() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Predicate p = null;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MATH_EXPR:
      t = jj_consume_token(MATH_EXPR);
            //if (! isBlank(t.image) ) {
                try { if (parsingTemplate) p = store.addPredicate(t.image,template.getAllLocalVariables());
                      else p = store.addPredicate(t.image); }
                catch(Exception e) {
                    {if (true) throw new ParseException("Cannot parse predicate " + t.image + "\u005cn" + e.getMessage());}
                }
            //}

      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
        if (p != null)
            {if (true) return p;}
        else
            {if (true) return new ConstantPredicate(true);}
    throw new Error("Missing return statement in function");
  }

  final public Function Func() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Function f;
    ArrayList<String> args = new ArrayList<String>();
    Token t,t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIESIS:
      jj_consume_token(DIESIS);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(LR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t1 = jj_consume_token(IDENTIFIER);
          break;
        case NUMBER:
          t1 = jj_consume_token(NUMBER);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              args.add(t1.image);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            t1 = jj_consume_token(IDENTIFIER);
            break;
          case NUMBER:
            t1 = jj_consume_token(NUMBER);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                  args.add(t1.image);
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(RR);
            try { if (parsingTemplate) f = store.getFunctionFromLibrary(t.image,args,template.getAllLocalVariables());
                  else f = store.getFunctionFromLibrary(t.image,args);  }
            catch (Exception e) { {if (true) throw new ParseException("Cannot add library function " + t.image + "\u005cn" + e.getMessage());} }
      break;
    case MATH_EXPR:
      t = jj_consume_token(MATH_EXPR);
            try { if (parsingTemplate) f = store.addFunction(t.image,template.getAllLocalVariables());
                  else f = store.addFunction(t.image);  }
            catch(Exception e) {
                {if (true) throw new ParseException("Cannot parse function" + t.image + "\u005cn" + e.getMessage());}
            }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

///template definition
  final public void Template() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    String name;
    SymbolArray boundedVars = new SymbolArray();
    Token t;
    jj_consume_token(KEYWORD_TEMPLATE);
    t = jj_consume_token(IDENTIFIER);
        name = t.image;
        if (model.isTemplate(name))
            {if (true) throw new ParseException("Template " + name + " already defined");}
    jj_consume_token(ARG_BEGIN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
            checkDots(t.image);
            boundedVars.addSymbol(t.image,0);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEP:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_5;
        }
        jj_consume_token(SEP);
        t = jj_consume_token(IDENTIFIER);
                checkDots(t.image);
                if (boundedVars.containsSymbol(t.image))
                    {if (true) throw new ParseException("Parametric argument " + t.image + " already defined for this template");}
                 boundedVars.addSymbol(t.image,0);
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(ARG_END);
        template = new FlatTemplate(name,boundedVars);
        parsingTemplate = true;
    jj_consume_token(BEGIN);
    label_6:
    while (true) {
      if (jj_2_3(1)) {
        ;
      } else {
        break label_6;
      }
      Variable();
    }
    label_7:
    while (true) {
      Transition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQ:
      case ASTERISK:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_7;
      }
    }
    jj_consume_token(END);
        model.addTemplate(name,template);
        template = null;
        parsingTemplate = false;
  }

  final public void TemplateInstance() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    ArrayList<Expression> expr = new ArrayList<Expression>();
    String name;
    String uniqueName = "";
    boolean named = false;
    jj_consume_token(KEYWORD_LET);
    if (getToken(2).kind == SEMICOLON) {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
            if (uniqueNames.contains( t.image))
                {if (true) throw new ParseException("Names of template instances must be unique: " + t.image);}
            uniqueName = t.image;
            uniqueNames.add(uniqueName);
            named = true;
    } else {
      ;
    }
    t = jj_consume_token(IDENTIFIER);
        name = t.image;
        if(!model.isTemplate(name))
            {if (true) throw new ParseException("template " + name + " undefined");}
        template = model.getTemplateDefinition(name);
    jj_consume_token(LSQ_TEMPLATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MATH_EXPR:
      t = jj_consume_token(MATH_EXPR);
            try {
                Expression exp = store.parseExpression(t.image);
                expr.add(exp);
            } catch (Exception e) {
                {if (true) throw new ParseException("Cannot parse expression" + t.image + "\u005cn" + e.getMessage());}
            }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEP_TEMPLATE:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_8;
        }
        jj_consume_token(SEP_TEMPLATE);
        t = jj_consume_token(MATH_EXPR);
                try {
                    Expression exp = store.parseExpression(t.image);
                    expr.add(exp);
                } catch (Exception e) {
                    {if (true) throw new ParseException("Cannot parse expression" + t.image + "\u005cn" + e.getMessage());}
                }
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(RSQ_TEMPLATE);
        if (expr.size() != template.getArity())
            {if (true) throw new ParseException("Wrong number of arguments passed to template " + name
                + ": required " +  template.getArity() + " found " + expr.size());}
        for (Transition tr : (named ? template.generateNewInstance(store,expr,uniqueName) : template.generateNewInstance(store,expr)))
            model.addTransition(tr);
        template = null;
    jj_consume_token(EOL);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    if (jj_scan_token(LSQ)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(KEYWORD_LET)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind == ASSIGN;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_16()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(KEYWORD_PARAM)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(KEYWORD_TEMPLATE)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(KEYWORD_EXPRESSION)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(KEYWORD_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FlatParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xc1f0000,0x0,0x8000000,0x70000000,0x4000,0x8000,0x0,0x200000,0x0,0x200000,0x200000,0x200000,0x0,0x200000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20,0x20,0x20,0x0,0x0,0x0,0x0,0x80000,0x20,0x8000,0x20,0x20,0x20,0x8000,0x20,0x20,0x40,0x200000,0x30,0x800,0x30,0x30,0x300000,0x4000,0x20,0x20,0x4,0x200000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FlatParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FlatParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FlatParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FlatParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FlatParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FlatParser(FlatParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FlatParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
