/* Generated By:JavaCC: Do not edit this line. ScriptParserTokenManager.java */
package com.eggloop.flow.simhya.simhya.script.parser;
import com.eggloop.flow.simhya.simhya.script.*;
import com.eggloop.flow.simhya.simhya.simengine.*;
import com.eggloop.flow.simhya.simhya.simengine.ode.IntegratorType;
import java.util.ArrayList;
import com.eggloop.flow.simhya.simhya.dataprocessing.chart.PlotFileType;
import com.eggloop.flow.simhya.simhya.dataprocessing.StatType;
import com.eggloop.flow.simhya.simhya.simengine.hybrid.GlobalSwitchType;
import com.eggloop.flow.simhya.simhya.GlobalOptions;
import com.eggloop.flow.simhya.simhya.modelchecking.SMCtype;
import com.eggloop.flow.simhya.simhya.modelchecking.EstimationMethod;
import com.eggloop.flow.simhya.simhya.modelchecking.ConfidenceBoundsMethod;
import com.eggloop.flow.simhya.simhya.modelchecking.TestMethod;

/** Token Manager. */
public class ScriptParserTokenManager implements ScriptParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x43c0140000000L) != 0L || (active1 & 0x8006000000000L) != 0L)
            return 2;
         if ((active0 & 0x300002a0001000L) != 0L || (active1 & 0x100000008000100L) != 0L)
            return 8;
         if ((active0 & 0x1f0000000e000000L) != 0L || (active1 & 0x1000000000L) != 0L)
            return 54;
         if ((active1 & 0x8000000000000000L) != 0L)
            return 75;
         return -1;
      case 1:
         if ((active0 & 0x1d00000000000000L) != 0L || (active1 & 0x1000000000L) != 0L)
            return 53;
         if ((active0 & 0x40000000L) != 0L)
            return 1;
         if ((active1 & 0x100000000000000L) != 0L)
            return 7;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 36:
         return jjStopAtPos(0, 136);
      case 40:
         return jjStopAtPos(0, 130);
      case 41:
         return jjStopAtPos(0, 131);
      case 44:
         return jjStopAtPos(0, 129);
      case 46:
         return jjStartNfaWithStates_7(0, 127, 75);
      case 58:
         return jjStopAtPos(0, 128);
      case 61:
         return jjStopAtPos(0, 126);
      case 91:
         return jjStopAtPos(0, 132);
      case 97:
         return jjMoveStringLiteralDfa1_7(0x40000000000000L, 0x10008000050000L);
      case 98:
         return jjMoveStringLiteralDfa1_7(0x4000800000000000L, 0x900080L);
      case 99:
         return jjMoveStringLiteralDfa1_7(0x0L, 0x800100002a1000L);
      case 100:
         return jjMoveStringLiteralDfa1_7(0x0L, 0x400000000001L);
      case 101:
         return jjMoveStringLiteralDfa1_7(0x300000L, 0x400000L);
      case 102:
         return jjMoveStringLiteralDfa1_7(0x300002a0001000L, 0x100000008000100L);
      case 103:
         return jjMoveStringLiteralDfa1_7(0x0L, 0x100000000000L);
      case 104:
         return jjMoveStringLiteralDfa1_7(0x42000L, 0x80000000040L);
      case 105:
         return jjMoveStringLiteralDfa1_7(0x2000000000000000L, 0x800000000L);
      case 106:
         return jjMoveStringLiteralDfa1_7(0x0L, 0x2000000000000L);
      case 107:
         return jjMoveStringLiteralDfa1_7(0x0L, 0x400000000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_7(0x1000800L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_7(0x1f0000000e000000L, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_7(0x0L, 0x2000020L);
      case 111:
         return jjMoveStringLiteralDfa1_7(0x800000L, 0x40000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_7(0x8000000038000L, 0x5000490000010L);
      case 113:
         return jjMoveStringLiteralDfa1_7(0x0L, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa1_7(0x80400000000000L, 0x80014000000aL);
      case 115:
         return jjMoveStringLiteralDfa1_7(0x8000030000484000L, 0xa40220224000204L);
      case 116:
         return jjMoveStringLiteralDfa1_7(0x43c0140000000L, 0x8006000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_7(0x2000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_7(0x1000010000000L, 0x20000000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_7(0x0L, 0x1000000L);
      case 120:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_7(0x800000000L, 0x0L);
      case 121:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_7(0x2000000000L, 0x0L);
      case 122:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_7(0x8000000000L, 0x0L);
      default :
         return jjMoveNfa_7(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_7(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_7(active0, 0x1d00000010004000L, active1, 0x120001000100002L);
      case 98:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         return jjMoveStringLiteralDfa2_7(active0, 0L, active1, 0x200L);
      case 99:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_7(active0, 0xc000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_7(active0, 0L, active1, 0x4040000040000L);
      case 101:
         return jjMoveStringLiteralDfa2_7(active0, 0x1000100402000L, active1, 0x8000100000000L);
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_7(active0, 0x10000L, active1, 0xa0000L);
      case 105:
         return jjMoveStringLiteralDfa2_7(active0, 0x42340802a00c0000L, active1, 0x221000081L);
      case 107:
         return jjMoveStringLiteralDfa2_7(active0, 0L, active1, 0x200800000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_7(active0, 0x28000L, active1, 0x8000000100L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         return jjMoveStringLiteralDfa2_7(active0, 0x2000000000000000L, active1, 0x1000800000000L);
      case 111:
         return jjMoveStringLiteralDfa2_7(active0, 0x8000000000800L, active1, 0x1045aa01030L);
      case 112:
         return jjMoveStringLiteralDfa2_7(active0, 0x800000L, active1, 0x2400000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_7(active0, 0x40001000L, active1, 0x80400000L);
      case 115:
         return jjMoveStringLiteralDfa2_7(active0, 0x2000000000000L, active1, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_7(active0, 0x80c0030000000000L, active1, 0x840000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_7(active0, 0xc00000000000L, active1, 0x400020004018008L);
      case 118:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         return jjMoveStringLiteralDfa2_7(active0, 0xa800000000L, active1, 0x10000000000000L);
      case 119:
         return jjMoveStringLiteralDfa2_7(active0, 0L, active1, 0x4L);
      case 120:
         return jjMoveStringLiteralDfa2_7(active0, 0x300000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_7(active0, 0x40000000000L, active1, 0x86000000040L);
      default :
         break;
   }
   return jjStartNfa_7(0, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa2_7(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_7(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa3_7(active0, 0xc000000L, active1, 0L);
      case 52:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 111);
         break;
      case 56:
         return jjMoveStringLiteralDfa3_7(active0, 0L, active1, 0x400000000000L);
      case 97:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 109);
         return jjMoveStringLiteralDfa3_7(active0, 0x3a840010800L, active1, 0x40100L);
      case 98:
         return jjMoveStringLiteralDfa3_7(active0, 0L, active1, 0x80040000000L);
      case 100:
         return jjMoveStringLiteralDfa3_7(active0, 0L, active1, 0x840000800000000L);
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 106);
         return jjMoveStringLiteralDfa3_7(active0, 0x2000000101000L, active1, 0x2100000000a8000L);
      case 102:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 114);
         break;
      case 103:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 112);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(2, 113);
         return jjMoveStringLiteralDfa3_7(active0, 0L, active1, 0x320000000L);
      case 105:
         return jjMoveStringLiteralDfa3_7(active0, 0x8000000000000L, active1, 0x90000004L);
      case 108:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 103);
         return jjMoveStringLiteralDfa3_7(active0, 0x280002000L, active1, 0x10001000008L);
      case 109:
         return jjMoveStringLiteralDfa3_7(active0, 0x4080100080000L, active1, 0x4001200L);
      case 110:
         return jjMoveStringLiteralDfa3_7(active0, 0x4230400000000000L, active1, 0x100000000200022L);
      case 111:
         return jjMoveStringLiteralDfa3_7(active0, 0x80c0000000028000L, active1, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa3_7(active0, 0x40000200000L, active1, 0x6000000050L);
      case 114:
         return jjMoveStringLiteralDfa3_7(active0, 0x1800010000000L, active1, 0x42002000a400000L);
      case 115:
         return jjMoveStringLiteralDfa3_7(active0, 0x40000L, active1, 0x1L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(2, 22);
         return jjMoveStringLiteralDfa3_7(active0, 0x2000000000800000L, active1, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa3_7(active0, 0L, active1, 0x800000L);
      case 118:
         return jjMoveStringLiteralDfa3_7(active0, 0x4000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_7(active0, 0L, active1, 0x400000000L);
      case 120:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 115);
         return jjMoveStringLiteralDfa3_7(active0, 0x1d00000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_7(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_7(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_7(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_7(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 53:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(3, 110);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_7(active0, 0x30000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_7(active0, 0x1000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_7(active0, 0x2000000100000L, active1, 0x20000L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(3, 11);
         return jjMoveStringLiteralDfa4_7(active0, 0L, active1, 0x40000000000000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(3, 12);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(3, 14);
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(3, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(3, 70);
         return jjMoveStringLiteralDfa4_7(active0, 0x3c04000200000000L, active1, 0x800006400100008L);
      case 102:
         return jjMoveStringLiteralDfa4_7(active0, 0L, active1, 0x20000200000L);
      case 103:
         return jjMoveStringLiteralDfa4_7(active0, 0L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa4_7(active0, 0x800000L, active1, 0x20000800000000L);
      case 106:
         return jjMoveStringLiteralDfa4_7(active0, 0x40000000L, active1, 0L);
      case 108:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(3, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(3, 55);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(3, 73);
         return jjMoveStringLiteralDfa4_7(active0, 0x200000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_7(active0, 0L, active1, 0xe000000L);
      case 110:
         return jjMoveStringLiteralDfa4_7(active0, 0x8800000000000L, active1, 0x230800000L);
      case 111:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(3, 80);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(3, 120);
         return jjMoveStringLiteralDfa4_7(active0, 0L, active1, 0x10080400000L);
      case 112:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(3, 13);
         return jjMoveStringLiteralDfa4_7(active0, 0x104000000L, active1, 0x41080L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 35);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 37);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 39);
         return jjMoveStringLiteralDfa4_7(active0, 0x8000000000000000L, active1, 0x10080000088000L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(3, 46);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(3, 62);
         return jjMoveStringLiteralDfa4_7(active0, 0x300000008010000L, active1, 0x1000000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(3, 18);
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(3, 72);
         return jjMoveStringLiteralDfa4_7(active0, 0x20000020000L, active1, 0x400000000000005L);
      case 117:
         return jjMoveStringLiteralDfa4_7(active0, 0x80000L, active1, 0x140000010L);
      case 119:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(3, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_7(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_7(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_7(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa5_7(active0, 0x20000L, active1, 0L);
      case 73:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_7(active0, 0L, active1, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_7(active0, 0x2000008000000L, active1, 0x30020026000000L);
      case 99:
         return jjMoveStringLiteralDfa5_7(active0, 0L, active1, 0x4L);
      case 100:
         return jjMoveStringLiteralDfa5_7(active0, 0L, active1, 0x800000L);
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(4, 63);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(4, 65);
         return jjMoveStringLiteralDfa5_7(active0, 0x40010000L, active1, 0x40000000000080L);
      case 102:
         return jjMoveStringLiteralDfa5_7(active0, 0L, active1, 0x800000000L);
      case 103:
         return jjMoveStringLiteralDfa5_7(active0, 0x2000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_7(active0, 0L, active1, 0x80200201000L);
      case 107:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(4, 81);
         break;
      case 108:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_7(active0, 0x10000104080000L, active1, 0x100000010L);
      case 110:
         return jjMoveStringLiteralDfa5_7(active0, 0L, active1, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa5_7(active0, 0x1820000a00000L, active1, 0x400000001000000L);
      case 114:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(4, 86);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 95);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(4, 98);
         return jjMoveStringLiteralDfa5_7(active0, 0L, active1, 0x800010000000001L);
      case 115:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(4, 67);
         return jjMoveStringLiteralDfa5_7(active0, 0x4000000000000L, active1, 0x40100000L);
      case 116:
         return jjMoveStringLiteralDfa5_7(active0, 0x308000200000000L, active1, 0x10040000L);
      case 117:
         return jjMoveStringLiteralDfa5_7(active0, 0x100000L, active1, 0x8000000L);
      case 118:
         return jjMoveStringLiteralDfa5_7(active0, 0x1c00000000000000L, active1, 0L);
      case 121:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(4, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_7(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_7(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_7(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 73:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(5, 102);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_7(active0, 0x100080000L, active1, 0x100000010L);
      case 99:
         return jjMoveStringLiteralDfa6_7(active0, 0x2000040000000L, active1, 0x20000000000L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(5, 17);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 107);
         return jjMoveStringLiteralDfa6_7(active0, 0L, active1, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa6_7(active0, 0x1f00000000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_7(active0, 0L, active1, 0xa00000000L);
      case 103:
         return jjMoveStringLiteralDfa6_7(active0, 0L, active1, 0x10000000000000L);
      case 104:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(5, 66);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_7(active0, 0L, active1, 0x140001L);
      case 108:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 89);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(5, 93);
         return jjMoveStringLiteralDfa6_7(active0, 0L, active1, 0x8001000L);
      case 109:
         return jjMoveStringLiteralDfa6_7(active0, 0L, active1, 0x10000000000L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(5, 88);
         return jjMoveStringLiteralDfa6_7(active0, 0x20000000000L, active1, 0x20000000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_7(active0, 0x4000000L, active1, 0x80000L);
      case 112:
         return jjMoveStringLiteralDfa6_7(active0, 0x10000L, active1, 0x80L);
      case 114:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(5, 123);
         return jjMoveStringLiteralDfa6_7(active0, 0x2000000000200000L, active1, 0x4000000L);
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(5, 51);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(5, 87);
         return jjMoveStringLiteralDfa6_7(active0, 0x11000000000000L, active1, 0x400000000000000L);
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(5, 94);
         return jjMoveStringLiteralDfa6_7(active0, 0x4000000100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_7(active0, 0x800000000000L, active1, 0L);
      case 118:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(5, 118);
         return jjMoveStringLiteralDfa6_7(active0, 0x8000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_7(active0, 0L, active1, 0x10000000L);
      case 121:
         return jjMoveStringLiteralDfa6_7(active0, 0x200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_7(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_7(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_7(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(6, 71);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 91);
         return jjMoveStringLiteralDfa7_7(active0, 0x2000000000000000L, active1, 0x10000100000L);
      case 98:
         return jjMoveStringLiteralDfa7_7(active0, 0L, active1, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa7_7(active0, 0L, active1, 0x20000000000000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(6, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(6, 21);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 27);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(6, 48);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 105);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(6, 116);
         return jjMoveStringLiteralDfa7_7(active0, 0x4000000000000L, active1, 0x800201000L);
      case 102:
         return jjMoveStringLiteralDfa7_7(active0, 0L, active1, 0x80000L);
      case 104:
         return jjMoveStringLiteralDfa7_7(active0, 0x2000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_7(active0, 0L, active1, 0x400000210000000L);
      case 108:
         return jjMoveStringLiteralDfa7_7(active0, 0x20000010000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_7(active0, 0x1c00000000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(6, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(6, 57);
         return jjMoveStringLiteralDfa7_7(active0, 0x200000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_7(active0, 0L, active1, 0x100000000L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(6, 47);
         return jjMoveStringLiteralDfa7_7(active0, 0x10000140080000L, active1, 0x10L);
      case 118:
         return jjMoveStringLiteralDfa7_7(active0, 0L, active1, 0x40000L);
      case 121:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 90);
         break;
      default :
         break;
   }
   return jjStartNfa_7(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_7(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_7(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_7(active0, 0x10000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_7(active0, 0L, active1, 0x200000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(7, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(7, 33);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(7, 49);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(7, 82);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(7, 117);
         break;
      case 102:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(7, 83);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_7(active0, 0L, active1, 0x100000010L);
      case 109:
         return jjMoveStringLiteralDfa8_7(active0, 0L, active1, 0x1000L);
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(7, 84);
         return jjMoveStringLiteralDfa8_7(active0, 0L, active1, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa8_7(active0, 0x40010000L, active1, 0L);
      case 112:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(7, 50);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(7, 104);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_7(active0, 0L, active1, 0x800000000L);
      case 115:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(7, 122);
         return jjMoveStringLiteralDfa8_7(active0, 0L, active1, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa8_7(active0, 0x3c00000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_7(active0, 0L, active1, 0x1L);
      case 121:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(7, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_7(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_7(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_7(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_7(active0, 0L, active1, 0x200001000L);
      case 99:
         return jjMoveStringLiteralDfa9_7(active0, 0L, active1, 0x200000L);
      case 101:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(8, 92);
         return jjMoveStringLiteralDfa9_7(active0, 0x1000000000000000L, active1, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa9_7(active0, 0x800000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_7(active0, 0x2000000000000000L, active1, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa9_7(active0, 0x40000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_7(active0, 0x400000000000000L, active1, 0x100000000L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(8, 16);
         return jjMoveStringLiteralDfa9_7(active0, 0x10000000000000L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_7(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_7(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_7(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(9, 85);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(9, 96);
         return jjMoveStringLiteralDfa10_7(active0, 0x10000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_7(active0, 0L, active1, 0x1L);
      case 110:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(9, 68);
         return jjMoveStringLiteralDfa10_7(active0, 0L, active1, 0xa00000000L);
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(9, 61);
         return jjMoveStringLiteralDfa10_7(active0, 0x1000000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa10_7(active0, 0xc00000000000000L, active1, 0x1000L);
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(9, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_7(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_7(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_7(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa11_7(active0, 0L, active1, 0xa00000000L);
      case 101:
         return jjMoveStringLiteralDfa11_7(active0, 0xc00000000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(10, 76);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_7(active0, 0x10000000000000L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa11_7(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_7(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_7(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_7(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(11, 97);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(11, 99);
         break;
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(11, 64);
         return jjMoveStringLiteralDfa12_7(active0, 0x10000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_7(active0, 0x1000000000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(11, 58);
         break;
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(11, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_7(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_7(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_7(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa13_7(active0, 0x10000000000000L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(12, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_7(11, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_7(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_7(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(13, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_7(12, active0, 0L, 0L);
}
private int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 75;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAdd(31);
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(31, 39);
                  else if (curChar == 45)
                     jjCheckNAddStates(7, 12);
                  break;
               case 25:
                  if (curChar == 45)
                     jjCheckNAddStates(7, 12);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar != 46)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar == 46)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (curChar == 46)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 41:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(0, 6);
                  break;
               case 48:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(31, 39);
                  break;
               case 57:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 69:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 61;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 3:
                  if (curChar == 77)
                     jjAddStates(13, 14);
                  else if (curChar == 109)
                     jjAddStates(15, 16);
                  else if (curChar == 84)
                     jjAddStates(17, 18);
                  else if (curChar == 70)
                     jjAddStates(19, 20);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 70)
                  {
                     if (kind > 78)
                        kind = 78;
                  }
                  else if (curChar == 84)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  break;
               case 53:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 60;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 0:
                  if (curChar == 101 && kind > 77)
                     kind = 77;
                  break;
               case 1:
               case 23:
                  if (curChar == 117)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 84 && kind > 77)
                     kind = 77;
                  break;
               case 5:
                  if (curChar == 101 && kind > 78)
                     kind = 78;
                  break;
               case 6:
               case 16:
                  if (curChar == 115)
                     jjCheckNAdd(5);
                  break;
               case 7:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 70 && kind > 78)
                     kind = 78;
                  break;
               case 11:
                  if (curChar == 70)
                     jjAddStates(19, 20);
                  break;
               case 12:
                  if (curChar == 69 && kind > 78)
                     kind = 78;
                  break;
               case 13:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 84)
                     jjAddStates(17, 18);
                  break;
               case 20:
                  if (curChar == 69 && kind > 77)
                     kind = 77;
                  break;
               case 21:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 49:
                  if (curChar == 109)
                     jjAddStates(15, 16);
                  break;
               case 50:
                  if (curChar == 98 && kind > 74)
                     kind = 74;
                  break;
               case 51:
               case 64:
                  if (curChar == 97)
                     jjCheckNAdd(50);
                  break;
               case 52:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 55:
                  if (curChar == 110)
                     kind = 75;
                  break;
               case 56:
               case 68:
                  if (curChar == 108)
                     jjCheckNAdd(55);
                  break;
               case 58:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 77)
                     jjAddStates(13, 14);
                  break;
               case 65:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 70:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 75 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 61:
         return jjStopAtPos(0, 126);
      case 91:
         return jjStopAtPos(0, 137);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(27, 33);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(6, 14);
                  else if (curChar == 45)
                     jjCheckNAddStates(34, 39);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar != 46)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(27, 33);
                  break;
               case 23:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(6, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 61:
         return jjStopAtPos(0, 126);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(46, 52);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(8, 16);
                  else if (curChar == 45)
                     jjCheckNAddStates(53, 58);
                  break;
               case 1:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAddStates(53, 58);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar != 46)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 46)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(46, 52);
                  break;
               case 25:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(8, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(1);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 148;
            return 1;
         }
         return -1;
      case 1:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 125);
      case 40:
         return jjStopAtPos(0, 130);
      case 41:
         return jjStopAtPos(0, 131);
      case 44:
         return jjStopAtPos(0, 129);
      case 58:
         return jjStopAtPos(0, 128);
      case 61:
         return jjStopAtPos(0, 126);
      case 91:
         return jjStopAtPos(0, 133);
      case 93:
         return jjStopAtPos(0, 135);
      case 108:
         return jjMoveStringLiteralDfa1_6(0x1000000000000000L);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, 0L, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa2_6(active1, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_6(0, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa2_6(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_6(0, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, 0L, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 103:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_6(2, 124, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_6(1, 0L, active1, 0L);
}
private int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(46, 52);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(8, 16);
                  else if (curChar == 45)
                     jjCheckNAddStates(53, 58);
                  break;
               case 1:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAddStates(53, 58);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar != 46)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 46)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(46, 52);
                  break;
               case 25:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(8, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(1);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 148;
            return 1;
         }
         if ((active2 & 0x4000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 130);
      case 41:
         return jjStopAtPos(0, 131);
      case 42:
         return jjStopAtPos(0, 143);
      case 43:
         return jjStopAtPos(0, 141);
      case 44:
         return jjStopAtPos(0, 129);
      case 45:
         return jjStartNfaWithStates_4(0, 142, 7);
      case 60:
         return jjStopAtPos(0, 146);
      case 61:
         return jjStopAtPos(0, 126);
      case 62:
         return jjStopAtPos(0, 145);
      case 91:
         return jjStopAtPos(0, 138);
      case 93:
         return jjStopAtPos(0, 140);
      case 110:
         return jjMoveStringLiteralDfa1_4(0x10000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa2_4(active2, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_4(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_4(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_4(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa3_4(active2, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_4(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_4(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_4(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 109:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_4(3, 144, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_4(2, 0L, 0L, active2);
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(46, 52);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(8, 16);
                  else if (curChar == 45)
                     jjCheckNAddStates(53, 58);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  else if (curChar == 46)
                     jjCheckNAdd(16);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(3);
                  }
                  break;
               case 1:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAddStates(53, 58);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar != 46)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(6);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 46)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(46, 52);
                  break;
               case 25:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(8, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(1);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 129);
      case 61:
         return jjStopAtPos(0, 126);
      case 93:
         return jjStopAtPos(0, 134);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(27, 33);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(6, 14);
                  else if (curChar == 45)
                     jjCheckNAddStates(34, 39);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar != 46)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(27, 33);
                  break;
               case 23:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(6, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 129);
      case 61:
         return jjStopAtPos(0, 126);
      case 93:
         return jjStopAtPos(0, 139);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(46, 52);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(8, 16);
                  else if (curChar == 45)
                     jjCheckNAddStates(53, 58);
                  break;
               case 1:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAddStates(53, 58);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar != 46)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 46)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(46, 52);
                  break;
               case 25:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(8, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(1);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 130);
      case 61:
         return jjStopAtPos(0, 126);
      default :
         return jjMoveNfa_2(1, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 25;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ffe00000000000L & l) != 0L)
                  {
                     if (kind > 149)
                        kind = 149;
                     jjCheckNAdd(0);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(65, 71);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(7, 15);
                  else if (curChar == 45)
                     jjCheckNAddStates(72, 77);
                  break;
               case 0:
                  if ((0x3ffe00000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar != 46)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(65, 71);
                  break;
               case 24:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(7, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(0);
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 20:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   26, 27, 28, 32, 33, 43, 44, 26, 27, 30, 32, 38, 43, 67, 74, 54, 
   62, 22, 24, 15, 18, 36, 37, 41, 42, 45, 46, 1, 2, 3, 7, 8, 
   18, 19, 1, 2, 5, 7, 13, 18, 11, 12, 16, 17, 20, 21, 3, 4, 
   5, 9, 10, 20, 21, 3, 4, 7, 9, 15, 20, 13, 14, 18, 19, 22, 
   23, 2, 3, 4, 8, 9, 19, 20, 2, 3, 6, 8, 14, 19, 12, 13, 
   17, 18, 21, 22, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, 
"\154\157\141\144", "\146\162\145\145", "\150\145\154\160", "\163\141\166\145", 
"\160\154\157\164", "\160\150\141\163\145\160\154\157\164", "\160\154\157\164\63\144", 
"\150\151\163\164", "\163\151\155\165\154\141\164\145", "\145\170\145\143\165\164\145", 
"\145\170\160\154\157\162\145", "\163\145\164", "\157\160\164\151\157\156", "\154\156", "\155\143", 
"\155\143\56\160\154\157\164", "\155\143\56\163\141\166\145", "\166\141\162\163", "\146\151\170", 
"\164\162\141\152\145\143\164\157\162\171", "\146\151\154\145", "\164\145\155\160\154\141\164\145", 
"\146\151\154\145\164\171\160\145", "\170", "\170\166\141\162", "\171", "\171\166\141\162", "\172", 
"\172\166\141\162", "\163\164\141\164", "\163\164\141\164\157\156\154\171", "\164\171\160\145", 
"\164\151\155\145", "\164\146", "\164\60", "\162\165\156\163", "\142\165\162\156\157\165\164", 
"\166\145\162\142\157\163\145", "\165\163\145\143\141\143\150\145", "\164\151\155\145\163\164\145\160", 
"\160\157\151\156\164\163", "\146\151\156\141\154\163\164\141\164\145\157\156\154\171", 
"\146\151\156\141\154", "\141\164\157\154", "\162\164\157\154", "\155\141\170\163\164\145\160", 
"\155\151\156\163\164\145\160", "\155\141\170\145\166\145\156\164\163\164\145\160", 
"\155\141\170\145\166\145\156\164\151\164\145\162", "\155\141\170\145\166\145\156\164\145\162\162\157\162", 
"\151\156\164\145\147\162\141\164\157\162", "\142\151\156\163", "\163\164\157\162\145", 
"\144\151\163\164\162\151\142\165\164\151\157\156", "\162\141\156\147\145", "\163\167\151\164\143\150", "\162\165\154\145\163", 
"\160\157\160\165\154\141\164\151\157\156", "\156\157\156\145", "\150\171\160\145", "\142\151\157\160\145\160\141", 
"\146\154\141\164", "\163\142\155\154", null, null, 
"\143\157\155\160\151\154\145\155\141\164\150", null, null, "\161\165\145\162\171", "\141\165\164\157", 
"\143\150\145\143\153", "\141\144\141\160\164\151\166\145", "\143\150\145\162\156\157\146\146", 
"\142\141\171\145\163\151\141\156", "\143\157\156\146\151\144\145\156\143\145", "\145\162\162\157\162", 
"\142\157\165\156\144\163", "\167\151\154\163\157\156", "\156\157\162\155\141\154", 
"\163\165\155\155\141\162\171", "\146\157\162\155\165\154\141", "\160\157\151\156\164\167\151\163\145", 
"\163\151\147\156\141\154", "\162\157\142\165\163\164", "\160\162\151\157\162", 
"\162\145\147\165\154\141\162\151\163\145", "\163\151\147\156\151\146\151\143\141\156\143\145", "\160\157\167\145\162", 
"\151\156\144\151\146\146\145\162\145\156\143\145", "\155\141\170", "\164\171\160\145\111", "\164\171\160\145\111\111", 
"\141\154\154", "\143\157\154\157\162\155\141\160", "\163\165\162\146\141\143\145", 
"\157\144\145", "\150\171\142\162\151\144", "\147\142", "\163\163\141", "\144\160\70\65", 
"\162\153\64", "\160\156\147", "\152\160\147", "\160\144\146", "\164\145\170", 
"\141\166\145\162\141\147\145", "\166\141\162\151\141\156\143\145", "\163\164\144\144\145\166", "\143\166", 
"\146\141\156\157", "\163\153\145\167", "\153\165\162\164\157\163\151\163", 
"\163\164\144\145\162\162", "\154\157\147", "\43", "\75", "\56", "\72", "\54", "\50", "\51", "\133", 
"\133", "\135", "\135", "\44", "\133", "\133", "\135", "\135", "\53", "\55", "\52", 
"\156\157\162\155", "\76", "\74", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "ID",
   "QUERYBEGIN",
   "FILESPEC",
   "INTERVAL",
   "QUERYLIST",
   "NUMERIC_LIST",
   "LIST",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 2, 2, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 6, 5, 6, 7, 0, 4, 3, 4, 7, -1, -1, -1, -1, -1, -1, 7, -1, 7, 
};
static final long[] jjtoToken = {
   0xfffffffffffff8e1L, 0xffffffffffffffffL, 0x3fffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[75];
private final int[] jjstateSet = new int[150];
protected char curChar;
/** Constructor. */
public ScriptParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ScriptParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 75; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 8 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 7;
int defaultLexState = 7;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
