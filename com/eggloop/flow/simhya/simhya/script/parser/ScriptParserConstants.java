/* Generated By:JavaCC: Do not edit this line. ScriptParserConstants.java */
package com.eggloop.flow.simhya.simhya.script.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ScriptParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER = 5;
  /** RegularExpression Id. */
  int FLOAT = 6;
  /** RegularExpression Id. */
  int FLOAT_SCIENTIFIC = 7;
  /** RegularExpression Id. */
  int EXPONENT = 8;
  /** RegularExpression Id. */
  int LETTER = 9;
  /** RegularExpression Id. */
  int DIGIT = 10;
  /** RegularExpression Id. */
  int LOAD = 11;
  /** RegularExpression Id. */
  int FREE = 12;
  /** RegularExpression Id. */
  int HELP = 13;
  /** RegularExpression Id. */
  int SAVE = 14;
  /** RegularExpression Id. */
  int PLOT = 15;
  /** RegularExpression Id. */
  int PHASEPLOT = 16;
  /** RegularExpression Id. */
  int PLOT3D = 17;
  /** RegularExpression Id. */
  int HIST = 18;
  /** RegularExpression Id. */
  int SIMULATE = 19;
  /** RegularExpression Id. */
  int EXECUTE = 20;
  /** RegularExpression Id. */
  int EXPLORE = 21;
  /** RegularExpression Id. */
  int SET = 22;
  /** RegularExpression Id. */
  int OPTION = 23;
  /** RegularExpression Id. */
  int LN = 24;
  /** RegularExpression Id. */
  int MC = 25;
  /** RegularExpression Id. */
  int MCPLOT = 26;
  /** RegularExpression Id. */
  int MCSAVE = 27;
  /** RegularExpression Id. */
  int VARS = 28;
  /** RegularExpression Id. */
  int FIX = 29;
  /** RegularExpression Id. */
  int TRAJECTORY = 30;
  /** RegularExpression Id. */
  int FILE = 31;
  /** RegularExpression Id. */
  int TEMPLATE = 32;
  /** RegularExpression Id. */
  int FILETYPE = 33;
  /** RegularExpression Id. */
  int X = 34;
  /** RegularExpression Id. */
  int XVAR = 35;
  /** RegularExpression Id. */
  int Y = 36;
  /** RegularExpression Id. */
  int YVAR = 37;
  /** RegularExpression Id. */
  int Z = 38;
  /** RegularExpression Id. */
  int ZVAR = 39;
  /** RegularExpression Id. */
  int STAT = 40;
  /** RegularExpression Id. */
  int STATONLY = 41;
  /** RegularExpression Id. */
  int TYPE = 42;
  /** RegularExpression Id. */
  int TIME = 43;
  /** RegularExpression Id. */
  int TF = 44;
  /** RegularExpression Id. */
  int T0 = 45;
  /** RegularExpression Id. */
  int RUNS = 46;
  /** RegularExpression Id. */
  int BURNOUT = 47;
  /** RegularExpression Id. */
  int VERBOSE = 48;
  /** RegularExpression Id. */
  int USECACHE = 49;
  /** RegularExpression Id. */
  int TIMESTEP = 50;
  /** RegularExpression Id. */
  int POINTS = 51;
  /** RegularExpression Id. */
  int FINALSTATEONLY = 52;
  /** RegularExpression Id. */
  int FINAL = 53;
  /** RegularExpression Id. */
  int ATOL = 54;
  /** RegularExpression Id. */
  int RTOL = 55;
  /** RegularExpression Id. */
  int MAXSTEP = 56;
  /** RegularExpression Id. */
  int MINSTEP = 57;
  /** RegularExpression Id. */
  int MAXEVENTSTEP = 58;
  /** RegularExpression Id. */
  int MAXEVENTITER = 59;
  /** RegularExpression Id. */
  int MAXEVENTERROR = 60;
  /** RegularExpression Id. */
  int INTEGRATOR = 61;
  /** RegularExpression Id. */
  int BINS = 62;
  /** RegularExpression Id. */
  int STORE = 63;
  /** RegularExpression Id. */
  int DISTRIBUTION = 64;
  /** RegularExpression Id. */
  int RANGE = 65;
  /** RegularExpression Id. */
  int SWITCH = 66;
  /** RegularExpression Id. */
  int RULES = 67;
  /** RegularExpression Id. */
  int POPULATION = 68;
  /** RegularExpression Id. */
  int NONE = 69;
  /** RegularExpression Id. */
  int HYPE = 70;
  /** RegularExpression Id. */
  int BIOPEPA = 71;
  /** RegularExpression Id. */
  int FLAT = 72;
  /** RegularExpression Id. */
  int SBML = 73;
  /** RegularExpression Id. */
  int MATLAB = 74;
  /** RegularExpression Id. */
  int MATLAB_LN = 75;
  /** RegularExpression Id. */
  int COMPILEMATH = 76;
  /** RegularExpression Id. */
  int TRUE = 77;
  /** RegularExpression Id. */
  int FALSE = 78;
  /** RegularExpression Id. */
  int QUERY = 79;
  /** RegularExpression Id. */
  int AUTO = 80;
  /** RegularExpression Id. */
  int CHECK = 81;
  /** RegularExpression Id. */
  int ADAPTIVE = 82;
  /** RegularExpression Id. */
  int CHERNOFF = 83;
  /** RegularExpression Id. */
  int BAYESIAN = 84;
  /** RegularExpression Id. */
  int CONFIDENCE = 85;
  /** RegularExpression Id. */
  int ERROR = 86;
  /** RegularExpression Id. */
  int BOUNDS = 87;
  /** RegularExpression Id. */
  int WILSON = 88;
  /** RegularExpression Id. */
  int NORMAL = 89;
  /** RegularExpression Id. */
  int SUMMARY = 90;
  /** RegularExpression Id. */
  int FORMULA = 91;
  /** RegularExpression Id. */
  int POINTWISE = 92;
  /** RegularExpression Id. */
  int SIGNAL = 93;
  /** RegularExpression Id. */
  int ROBUST = 94;
  /** RegularExpression Id. */
  int PRIOR = 95;
  /** RegularExpression Id. */
  int REGULARISE = 96;
  /** RegularExpression Id. */
  int SIGNIFICANCE = 97;
  /** RegularExpression Id. */
  int POWER = 98;
  /** RegularExpression Id. */
  int INDIFFERENCE = 99;
  /** RegularExpression Id. */
  int MAX = 100;
  /** RegularExpression Id. */
  int TYPEI = 101;
  /** RegularExpression Id. */
  int TYPEII = 102;
  /** RegularExpression Id. */
  int ALL = 103;
  /** RegularExpression Id. */
  int COLORMAP = 104;
  /** RegularExpression Id. */
  int SURFACE = 105;
  /** RegularExpression Id. */
  int ODE = 106;
  /** RegularExpression Id. */
  int HYBRID = 107;
  /** RegularExpression Id. */
  int GB = 108;
  /** RegularExpression Id. */
  int SSA = 109;
  /** RegularExpression Id. */
  int DP85 = 110;
  /** RegularExpression Id. */
  int RK4 = 111;
  /** RegularExpression Id. */
  int PNG = 112;
  /** RegularExpression Id. */
  int JPG = 113;
  /** RegularExpression Id. */
  int PDF = 114;
  /** RegularExpression Id. */
  int TEX = 115;
  /** RegularExpression Id. */
  int AVERAGE = 116;
  /** RegularExpression Id. */
  int VARIANCE = 117;
  /** RegularExpression Id. */
  int STDDEV = 118;
  /** RegularExpression Id. */
  int CV = 119;
  /** RegularExpression Id. */
  int FANO = 120;
  /** RegularExpression Id. */
  int SKEW = 121;
  /** RegularExpression Id. */
  int KURTOSIS = 122;
  /** RegularExpression Id. */
  int STDERR = 123;
  /** RegularExpression Id. */
  int LOG = 124;
  /** RegularExpression Id. */
  int DIESIS = 125;
  /** RegularExpression Id. */
  int ASSIGN = 126;
  /** RegularExpression Id. */
  int DOT = 127;
  /** RegularExpression Id. */
  int SEMICOLON = 128;
  /** RegularExpression Id. */
  int COMMA = 129;
  /** RegularExpression Id. */
  int R_OPEN = 130;
  /** RegularExpression Id. */
  int R_CLOSE = 131;
  /** RegularExpression Id. */
  int S_OPEN = 132;
  /** RegularExpression Id. */
  int S_OPEN_LIST = 133;
  /** RegularExpression Id. */
  int S_CLOSE_LIST = 134;
  /** RegularExpression Id. */
  int S_CLOSE = 135;
  /** RegularExpression Id. */
  int DOLLAR = 136;
  /** RegularExpression Id. */
  int SQ_OPEN = 137;
  /** RegularExpression Id. */
  int SQ_OPEN_INT = 138;
  /** RegularExpression Id. */
  int SQ_CLOSE_INT = 139;
  /** RegularExpression Id. */
  int SQ_CLOSE = 140;
  /** RegularExpression Id. */
  int PLUS = 141;
  /** RegularExpression Id. */
  int MINUS = 142;
  /** RegularExpression Id. */
  int TIMES = 143;
  /** RegularExpression Id. */
  int NORM = 144;
  /** RegularExpression Id. */
  int GREATER = 145;
  /** RegularExpression Id. */
  int LESS = 146;
  /** RegularExpression Id. */
  int IDENTIFIER = 147;
  /** RegularExpression Id. */
  int MODEL_IDENTIFIER = 148;
  /** RegularExpression Id. */
  int FILENAME = 149;

  /** Lexical state. */
  int ID = 0;
  /** Lexical state. */
  int QUERYBEGIN = 1;
  /** Lexical state. */
  int FILESPEC = 2;
  /** Lexical state. */
  int INTERVAL = 3;
  /** Lexical state. */
  int QUERYLIST = 4;
  /** Lexical state. */
  int NUMERIC_LIST = 5;
  /** Lexical state. */
  int LIST = 6;
  /** Lexical state. */
  int DEFAULT = 7;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<INTEGER>",
    "<FLOAT>",
    "<FLOAT_SCIENTIFIC>",
    "<EXPONENT>",
    "<LETTER>",
    "<DIGIT>",
    "\"load\"",
    "\"free\"",
    "\"help\"",
    "\"save\"",
    "\"plot\"",
    "\"phaseplot\"",
    "\"plot3d\"",
    "\"hist\"",
    "\"simulate\"",
    "\"execute\"",
    "\"explore\"",
    "\"set\"",
    "\"option\"",
    "\"ln\"",
    "\"mc\"",
    "\"mc.plot\"",
    "\"mc.save\"",
    "\"vars\"",
    "\"fix\"",
    "\"trajectory\"",
    "\"file\"",
    "\"template\"",
    "\"filetype\"",
    "\"x\"",
    "\"xvar\"",
    "\"y\"",
    "\"yvar\"",
    "\"z\"",
    "\"zvar\"",
    "\"stat\"",
    "\"statonly\"",
    "\"type\"",
    "\"time\"",
    "\"tf\"",
    "\"t0\"",
    "\"runs\"",
    "\"burnout\"",
    "\"verbose\"",
    "\"usecache\"",
    "\"timestep\"",
    "\"points\"",
    "\"finalstateonly\"",
    "\"final\"",
    "\"atol\"",
    "\"rtol\"",
    "\"maxstep\"",
    "\"minstep\"",
    "\"maxeventstep\"",
    "\"maxeventiter\"",
    "\"maxeventerror\"",
    "\"integrator\"",
    "\"bins\"",
    "\"store\"",
    "\"distribution\"",
    "\"range\"",
    "\"switch\"",
    "\"rules\"",
    "\"population\"",
    "\"none\"",
    "\"hype\"",
    "\"biopepa\"",
    "\"flat\"",
    "\"sbml\"",
    "<MATLAB>",
    "<MATLAB_LN>",
    "\"compilemath\"",
    "<TRUE>",
    "<FALSE>",
    "\"query\"",
    "\"auto\"",
    "\"check\"",
    "\"adaptive\"",
    "\"chernoff\"",
    "\"bayesian\"",
    "\"confidence\"",
    "\"error\"",
    "\"bounds\"",
    "\"wilson\"",
    "\"normal\"",
    "\"summary\"",
    "\"formula\"",
    "\"pointwise\"",
    "\"signal\"",
    "\"robust\"",
    "\"prior\"",
    "\"regularise\"",
    "\"significance\"",
    "\"power\"",
    "\"indifference\"",
    "\"max\"",
    "\"typeI\"",
    "\"typeII\"",
    "\"all\"",
    "\"colormap\"",
    "\"surface\"",
    "\"ode\"",
    "\"hybrid\"",
    "\"gb\"",
    "\"ssa\"",
    "\"dp85\"",
    "\"rk4\"",
    "\"png\"",
    "\"jpg\"",
    "\"pdf\"",
    "\"tex\"",
    "\"average\"",
    "\"variance\"",
    "\"stddev\"",
    "\"cv\"",
    "\"fano\"",
    "\"skew\"",
    "\"kurtosis\"",
    "\"stderr\"",
    "\"log\"",
    "\"#\"",
    "\"=\"",
    "\".\"",
    "\":\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"[\"",
    "\"]\"",
    "\"]\"",
    "\"$\"",
    "\"[\"",
    "\"[\"",
    "\"]\"",
    "\"]\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"norm\"",
    "\">\"",
    "\"<\"",
    "<IDENTIFIER>",
    "<MODEL_IDENTIFIER>",
    "<FILENAME>",
  };

}
