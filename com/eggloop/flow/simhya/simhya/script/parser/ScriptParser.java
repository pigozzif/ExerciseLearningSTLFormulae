/* Generated By:JavaCC: Do not edit this line. ScriptParser.java */
package com.eggloop.flow.simhya.simhya.script.parser;

import com.eggloop.flow.simhya.simhya.script.CommandManager;
import com.eggloop.flow.simhya.simhya.script.*;
import com.eggloop.flow.simhya.simhya.simengine.*;
import com.eggloop.flow.simhya.simhya.simengine.ode.IntegratorType;
import java.util.ArrayList;
import com.eggloop.flow.simhya.simhya.dataprocessing.chart.PlotFileType;
import com.eggloop.flow.simhya.simhya.dataprocessing.StatType;
import com.eggloop.flow.simhya.simhya.simengine.hybrid.GlobalSwitchType;
import com.eggloop.flow.simhya.simhya.GlobalOptions;
import com.eggloop.flow.simhya.simhya.modelchecking.SMCtype;
import com.eggloop.flow.simhya.simhya.modelchecking.EstimationMethod;
import com.eggloop.flow.simhya.simhya.modelchecking.ConfidenceBoundsMethod;
import com.eggloop.flow.simhya.simhya.modelchecking.TestMethod;




public class ScriptParser implements ScriptParserConstants {
    private CommandManager cmd;
    private int modelIndex = 0;
    private int collectorIndex = 0;
    private int statIndex = 0;
    private int exporerIndex = 0;


    public ScriptParser(CommandManager comMan) {
        this(new java.io.StringReader(""));
        this.cmd = comMan;
    }

    public void parseCommand( String command ) throws ParseException, TokenMgrError, NumberFormatException {
        this.ReInit(new java.io.StringReader(command));
        this.Start();
    }

    private ArrayList<Double> generateList(double first, double last, int k, boolean log) throws ParseException {
        ArrayList<Double> list = new ArrayList<Double>();
        if (k<2) throw new ParseException("Not enough points in the parameter range. At least 2 required.");
        if (!log) {
            double step = (last-first)/(double)(k-1);
            for (int i=0;i<k;i++)
                list.add(first + i*step);
        } else {
            double logarithmicFirst = Math.log10(first);
            double step = step = (Math.log10(last) - Math.log10(first))/(double)(k-1);
             for (int i=0;i<k;i++)
                list.add(Math.pow(10, logarithmicFirst + i*step));
        }
        return list;
    }

  final public void Start() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   String assignVar = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOAD:
    case SIMULATE:
    case EXPLORE:
    case LN:
    case MC:
    case DOLLAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
        jj_consume_token(DOLLAR);
        t = jj_consume_token(IDENTIFIER);
                assignVar = t.image;
        jj_consume_token(ASSIGN);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOAD:
        Load(assignVar);
        break;
      case LN:
        Ln(assignVar);
        break;
      case SIMULATE:
        Simulate(assignVar);
        break;
      case EXPLORE:
        Explore(assignVar);
        break;
      case MC:
        MC(assignVar);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PLOT:
      Plot();
      break;
    case PHASEPLOT:
      PhasePlot();
      break;
    case PLOT3D:
      Plot3d();
      break;
    case HIST:
      Hist();
      break;
    case SAVE:
      Save();
      break;
    case FREE:
      Free();
      break;
    case HELP:
      Help();
      break;
    case EXECUTE:
      Execute();
      break;
    case SET:
      Set();
      break;
    case OPTION:
      Option();
      break;
    case MCPLOT:
      PlotMC();
      break;
    case MCSAVE:
      SaveMC();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);

  }

////////////////////////////////////////////////////////////////////////////
/////////   SET OPTIONS
////////////////////////////////////////////////////////////////////////////
  final public void Option() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    jj_consume_token(OPTION);
    jj_consume_token(R_OPEN);
    label_1:
    while (true) {
      jj_consume_token(COMPILEMATH);
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
                  GlobalOptions.compileMath = true; cmd.printMessage("Option compilemath set to true");
        break;
      case FALSE:
        jj_consume_token(FALSE);
                   GlobalOptions.compileMath = false;  cmd.printMessage("Option compilemath set to false");
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPILEMATH:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(R_CLOSE);
  }

////////////////////////////////////////////////////////////////////////////
/////////   LOAD MODEL
////////////////////////////////////////////////////////////////////////////
  final public void Load(String varName) throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t,t1=null;
   final int MODEL_FLAT = 0;
   final int MODEL_HYPE = 1;
   final int MODEL_BIOPEPA = 2;
   final int CHECKING = 3;
   int type = MODEL_FLAT;
    jj_consume_token(LOAD);
    jj_consume_token(R_OPEN);
    t = jj_consume_token(FILENAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HYPE:
        jj_consume_token(HYPE);
                   type= MODEL_HYPE;
        break;
      case FLAT:
        jj_consume_token(FLAT);
                   type= MODEL_FLAT;
        break;
      case BIOPEPA:
        jj_consume_token(BIOPEPA);
                      type= MODEL_BIOPEPA;
        break;
      case CHECK:
        jj_consume_token(CHECK);
        jj_consume_token(ASSIGN);
        jj_consume_token(DOLLAR);
        t1 = jj_consume_token(IDENTIFIER);
             type = CHECKING;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(R_CLOSE);
        if (varName == null) {
            varName = "model" + modelIndex;
            modelIndex ++;
            while (cmd.containsVariable(varName)) {
                varName = "model" + modelIndex;
                modelIndex ++;
            }
        }
        switch(type) {
            case MODEL_FLAT:
                cmd.loadFlatModel(varName,t.image);
                break;
            case MODEL_HYPE:
                cmd.loadHypeModel(varName,t.image);
                break;
            case MODEL_BIOPEPA:
//                cmd.loadBiopepaModel(varName,t.image);
                break;
            case CHECKING:
                cmd.loadSMCenvironment(varName,t.image,t1.image);
                break;
            default:
                {if (true) throw new ParseException("Unknown model type");}
                break;
        }
  }

/*
////////////////////////////////////////////////////////////////////////////
/////////   Linear Noise approximation LN
////////////////////////////////////////////////////////////////////////////

void Ln(String varName) throws NumberFormatException, RuntimeException, ParseException :
{
   Token t;
   if (varName == null) {
        varName = "ln" + modelIndex;
        modelIndex ++;
        while (cmd.containsVariable(varName)) {
            varName = "ln" + modelIndex;
            modelIndex ++;
        }
   }
}
{
    <LN>
    <R_OPEN>
    <DOLLAR>
    t = <IDENTIFIER>
    <R_CLOSE>
    {
        cmd.generateLinearNoiseFlatModel(varName,t.image);
    }
}
*/

////////////////////////////////////////////////////////////////////////////
/////////   EXECUTE SCRIPT
////////////////////////////////////////////////////////////////////////////
  final public void Execute() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
    jj_consume_token(EXECUTE);
    jj_consume_token(R_OPEN);
    t = jj_consume_token(FILENAME);
    jj_consume_token(R_CLOSE);
        cmd.executeScriptFile(t.image);
  }

////////////////////////////////////////////////////////////////////////////
/////////   SIMULATE MODEL
////////////////////////////////////////////////////////////////////////////
  final public void Simulate(String varName) throws ParseException, NumberFormatException, RuntimeException, ParseException {
   int i; double d,d1;
   Token t;
   ArrayList<String> list;
   SimulationManager manager;
   if (varName == null) {
        varName = "data" + collectorIndex;
        collectorIndex ++;
        while (cmd.containsVariable(varName)) {
            varName = "data" + collectorIndex;
            collectorIndex ++;
        }
   }
    jj_consume_token(SIMULATE);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
        manager = new SimulationManager(t.image,varName,cmd);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
      case ODE:
      case HYBRID:
      case GB:
      case SSA:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPE:
          jj_consume_token(TYPE);
          jj_consume_token(ASSIGN);
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ODE:
          jj_consume_token(ODE);
                     manager.type = SimType.ODE;
          break;
        case HYBRID:
          jj_consume_token(HYBRID);
                        manager.type = SimType.HYBRID;
          break;
        case SSA:
          jj_consume_token(SSA);
                     manager.type = SimType.SSA;
          break;
        case GB:
          jj_consume_token(GB);
                    manager.type = SimType.GB;
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case TIME:
      case TF:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIME:
          jj_consume_token(TIME);
          break;
        case TF:
          jj_consume_token(TF);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.tf = d;
        break;
      case RUNS:
        jj_consume_token(RUNS);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.runs = i;
        break;
      case VERBOSE:
        jj_consume_token(VERBOSE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.verbose = i;
        break;
      case T0:
        jj_consume_token(T0);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.t0 = d;
        break;
      case BURNOUT:
        jj_consume_token(BURNOUT);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.burnout = d;
        break;
      case TIMESTEP:
        jj_consume_token(TIMESTEP);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.timestep = d;
        break;
      case ATOL:
        jj_consume_token(ATOL);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.atol = d;
        break;
      case RTOL:
        jj_consume_token(RTOL);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.rtol = d;
        break;
      case MAXSTEP:
        jj_consume_token(MAXSTEP);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.maxStep = d;
        break;
      case MINSTEP:
        jj_consume_token(MINSTEP);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.minStep = d;
        break;
      case MAXEVENTSTEP:
        jj_consume_token(MAXEVENTSTEP);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.maxEventStep = d;
        break;
      case MAXEVENTERROR:
        jj_consume_token(MAXEVENTERROR);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.maxEventError = d;
        break;
      case POINTS:
        jj_consume_token(POINTS);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.points = i;
        break;
      case MAXEVENTITER:
        jj_consume_token(MAXEVENTITER);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.maxEventIter = i;
        break;
      case USECACHE:
        jj_consume_token(USECACHE);
              manager.useCache = true;
        break;
      case FINALSTATEONLY:
        jj_consume_token(FINALSTATEONLY);
              manager.finalStateOnly = true;
        break;
      case INTEGRATOR:
        jj_consume_token(INTEGRATOR);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DP85:
          jj_consume_token(DP85);
                      manager.odetype = IntegratorType.DP85;
          break;
        case RK4:
          jj_consume_token(RK4);
                     manager.odetype = IntegratorType.RK4;
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case SAVE:
        jj_consume_token(SAVE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
                  manager.varsToSave = null;
          break;
        case S_OPEN:
          list = SymbolList();
                  manager.varsToSave = list;
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case STORE:
        jj_consume_token(STORE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AUTO:
          jj_consume_token(AUTO);
                 manager.storeLevel = manager.STORE_AUTO;
          break;
        case ALL:
          jj_consume_token(ALL);
                 manager.storeLevel = manager.STORE_ALL;
          break;
        case FINAL:
          jj_consume_token(FINAL);
                 manager.storeLevel = manager.STORE_FINAL;
          break;
        case STATONLY:
          jj_consume_token(STATONLY);
                 manager.storeLevel = manager.STORE_STAT;
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case SWITCH:
        jj_consume_token(SWITCH);
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NONE:
          jj_consume_token(NONE);
                  manager.switchType = GlobalSwitchType.NO_SWITCH;
          break;
        case RULES:
          jj_consume_token(RULES);
          jj_consume_token(ASSIGN);
          t = jj_consume_token(FILENAME);
                  manager.ruleFile = t.image;
          break;
        case POPULATION:
          jj_consume_token(POPULATION);
                  manager.switchType = GlobalSwitchType.POPULATION;
          jj_consume_token(R_OPEN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            t = jj_consume_token(INTEGER);
            break;
          case FLOAT:
            t = jj_consume_token(FLOAT);
            break;
          case FLOAT_SCIENTIFIC:
            t = jj_consume_token(FLOAT_SCIENTIFIC);
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                  d = Double.parseDouble(t.image); manager.discrete2continuousThreshold = d;
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            t = jj_consume_token(INTEGER);
            break;
          case FLOAT:
            t = jj_consume_token(FLOAT);
            break;
          case FLOAT_SCIENTIFIC:
            t = jj_consume_token(FLOAT_SCIENTIFIC);
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                  d = Double.parseDouble(t.image); manager.continuous2discreteThreshold = d;
          jj_consume_token(R_CLOSE);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_CLOSE);
        try {
            manager.simulate();
        } catch (Exception e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
  }

////////////////////////////////////////////////////////////////////////////
/////////   Linear Noise approximation LN
////////////////////////////////////////////////////////////////////////////
  final public void Ln(String varName) throws ParseException, NumberFormatException, RuntimeException, ParseException {
   int i; double d,d1;
   Token t;
   ArrayList<String> list;
   LinearNoiseManager manager;
   if (varName == null) {
        varName = "data" + collectorIndex;
        collectorIndex ++;
        while (cmd.containsVariable(varName)) {
            varName = "data" + collectorIndex;
            collectorIndex ++;
        }
   }
    jj_consume_token(LN);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
        manager = new LinearNoiseManager(varName,t.image,cmd);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIME:
      case TF:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIME:
          jj_consume_token(TIME);
          break;
        case TF:
          jj_consume_token(TF);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.tf = d;
        break;
      case VERBOSE:
        jj_consume_token(VERBOSE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.verbose = i;
        break;
      case T0:
        jj_consume_token(T0);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.t0 = d;
        break;
      case ATOL:
        jj_consume_token(ATOL);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.atol = d;
        break;
      case RTOL:
        jj_consume_token(RTOL);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.rtol = d;
        break;
      case MAXSTEP:
        jj_consume_token(MAXSTEP);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.maxStep = d;
        break;
      case MINSTEP:
        jj_consume_token(MINSTEP);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.minStep = d;
        break;
      case MAXEVENTSTEP:
        jj_consume_token(MAXEVENTSTEP);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.maxEventStep = d;
        break;
      case MAXEVENTERROR:
        jj_consume_token(MAXEVENTERROR);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.maxEventError = d;
        break;
      case POINTS:
        jj_consume_token(POINTS);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.points = i;
        break;
      case MAXEVENTITER:
        jj_consume_token(MAXEVENTITER);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.maxEventIter = i;
        break;
      case USECACHE:
        jj_consume_token(USECACHE);
              manager.useCache = true;
        break;
      case FINALSTATEONLY:
        jj_consume_token(FINALSTATEONLY);
              manager.finalStateOnly = true;
        break;
      case INTEGRATOR:
        jj_consume_token(INTEGRATOR);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DP85:
          jj_consume_token(DP85);
                      manager.odetype = IntegratorType.DP85;
          break;
        case RK4:
          jj_consume_token(RK4);
                     manager.odetype = IntegratorType.RK4;
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case QUERY:
        jj_consume_token(QUERY);
        jj_consume_token(ASSIGN);
        LinearNoiseQueryList(manager);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_CLOSE);
        try {
            manager.simulate();
        } catch (Exception e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
  }

////////////////////////////////////////////////////////////////////////////
/////////   COMPUTE STATISTICS
////////////////////////////////////////////////////////////////////////////
/*
void Statistics(String varName) throws NumberFormatException, RuntimeException, ParseException :
{
   Token t;
   if (varName == null) {
        varName = "stat" + statIndex;
        statIndex ++;
        while (cmd.containsVariable(varName)) {
            varName = "stat" + statIndex;
            statIndex ++;
        }
    }
}
{
    <STATISTICS>
    <R_OPEN>
    <DOLLAR>
    t = <IDENTIFIER>
    <R_CLOSE>
    {
        cmd.computeStatistics(t.image,varName);
    }
}
*/

////////////////////////////////////////////////////////////////////////////
/////////   EXPLORE PARAMETER SPACE
////////////////////////////////////////////////////////////////////////////
  final public void Explore(String varName) throws ParseException, NumberFormatException, RuntimeException, ParseException {
   int i; double d;
   Token t;
   ArrayList<String> list;
   ExplorationManager manager;
   if (varName == null) {
        varName = "expdata" + exporerIndex;
        exporerIndex ++;
        while (cmd.containsVariable(varName)) {
            varName = "expdata" + exporerIndex;
            exporerIndex ++;
        }
   }
    jj_consume_token(EXPLORE);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
        manager = new ExplorationManager(t.image,varName,cmd);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LN:
      case TYPE:
      case ODE:
      case HYBRID:
      case GB:
      case SSA:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPE:
          jj_consume_token(TYPE);
          jj_consume_token(ASSIGN);
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ODE:
          jj_consume_token(ODE);
                     manager.type = SimType.ODE;
          break;
        case HYBRID:
          jj_consume_token(HYBRID);
                        manager.type = SimType.HYBRID;
          break;
        case SSA:
          jj_consume_token(SSA);
                     manager.type = SimType.SSA;
          break;
        case GB:
          jj_consume_token(GB);
                    manager.type = SimType.GB;
          break;
        case LN:
          jj_consume_token(LN);
                    manager.type = SimType.LN;
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case TIME:
      case TF:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIME:
          jj_consume_token(TIME);
          break;
        case TF:
          jj_consume_token(TF);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.tf = d;
        break;
      case RUNS:
        jj_consume_token(RUNS);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.runs = i;
        break;
      case VERBOSE:
        jj_consume_token(VERBOSE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.verbose = i;
        break;
      case T0:
        jj_consume_token(T0);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.t0 = d;
        break;
      case BURNOUT:
        jj_consume_token(BURNOUT);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.burnout = d;
        break;
      case POINTS:
        jj_consume_token(POINTS);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.points = i;
        break;
      case ATOL:
        jj_consume_token(ATOL);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.atol = d;
        break;
      case RTOL:
        jj_consume_token(RTOL);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.rtol = d;
        break;
      case MAXSTEP:
        jj_consume_token(MAXSTEP);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.maxStep = d;
        break;
      case MINSTEP:
        jj_consume_token(MINSTEP);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.minStep = d;
        break;
      case MAXEVENTSTEP:
        jj_consume_token(MAXEVENTSTEP);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.maxEventStep = d;
        break;
      case MAXEVENTERROR:
        jj_consume_token(MAXEVENTERROR);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.maxEventError = d;
        break;
      case MAXEVENTITER:
        jj_consume_token(MAXEVENTITER);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.maxEventIter = i;
        break;
      case USECACHE:
        jj_consume_token(USECACHE);
              manager.useCache = true;
        break;
      case INTEGRATOR:
        jj_consume_token(INTEGRATOR);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DP85:
          jj_consume_token(DP85);
                      manager.odetype = IntegratorType.DP85;
          break;
        case RK4:
          jj_consume_token(RK4);
                     manager.odetype = IntegratorType.RK4;
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case SAVE:
        jj_consume_token(SAVE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
                  manager.varsToSave = null;
          break;
        case S_OPEN:
          list = SymbolList();
                  manager.varsToSave = list;
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case SWITCH:
        jj_consume_token(SWITCH);
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NONE:
          jj_consume_token(NONE);
                  manager.switchType = GlobalSwitchType.NO_SWITCH;
          break;
        case RULES:
          jj_consume_token(RULES);
          jj_consume_token(ASSIGN);
          t = jj_consume_token(FILENAME);
                  manager.ruleFile = t.image;
          break;
        case POPULATION:
          jj_consume_token(POPULATION);
                  manager.switchType = GlobalSwitchType.POPULATION;
          jj_consume_token(R_OPEN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            t = jj_consume_token(INTEGER);
            break;
          case FLOAT:
            t = jj_consume_token(FLOAT);
            break;
          case FLOAT_SCIENTIFIC:
            t = jj_consume_token(FLOAT_SCIENTIFIC);
            break;
          default:
            jj_la1[55] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                  d = Double.parseDouble(t.image); manager.discrete2continuousThreshold = d;
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            t = jj_consume_token(INTEGER);
            break;
          case FLOAT:
            t = jj_consume_token(FLOAT);
            break;
          case FLOAT_SCIENTIFIC:
            t = jj_consume_token(FLOAT_SCIENTIFIC);
            break;
          default:
            jj_la1[56] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                  d = Double.parseDouble(t.image); manager.continuous2discreteThreshold = d;
          jj_consume_token(R_CLOSE);
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case STORE:
        jj_consume_token(STORE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
                    manager.finalStateOnly = false;
                    manager.storeDistributions = true;
                    manager.storeTrajectories = true;
          break;
        case FINAL:
          jj_consume_token(FINAL);
                    manager.finalStateOnly = true;
                    manager.storeDistributions = false;
                    manager.storeTrajectories = false;
          break;
        case DISTRIBUTION:
          jj_consume_token(DISTRIBUTION);
                    manager.finalStateOnly = true;
                    manager.storeDistributions = true;
                    manager.storeTrajectories = false;
          break;
        case TRAJECTORY:
          jj_consume_token(TRAJECTORY);
                    manager.finalStateOnly = false;
                    manager.storeDistributions = false;
                    manager.storeTrajectories = true;
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FILE:
        jj_consume_token(FILE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(FILENAME);
              manager.filename = t.image;
        break;
      case TEMPLATE:
        jj_consume_token(TEMPLATE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(FILENAME);
              manager.fileTemplate = t.image;
        break;
      case RANGE:
        jj_consume_token(RANGE);
        jj_consume_token(ASSIGN);
        RangeList(manager);
        break;
      case QUERY:
        jj_consume_token(QUERY);
        jj_consume_token(ASSIGN);
        LinearNoiseQueryList(manager);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_CLOSE);
        try {
            manager.simulate();
        } catch (Exception e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
  }

////////////////////////////////////////////////////////////////////////////
/////////   TRACE PLOTTER
////////////////////////////////////////////////////////////////////////////
  final public void Plot() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   int i,j;
   double d;
   ArrayList<String> varList = new ArrayList<String>();
   TracePlotter plotter;
   ArrayList<Integer> idList;
   ArrayList<String> stringList;
   ArrayList<ArrayList<Double>> valueLists;
    jj_consume_token(PLOT);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
      varList.add(t.image);
    label_5:
    while (true) {
      if (getToken(2).kind == DOLLAR) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(COMMA);
      jj_consume_token(DOLLAR);
      t = jj_consume_token(IDENTIFIER);
          varList.add(t.image);
    }
            try {
                if (varList.size() == 1)
                    plotter = new TracePlotter(varList.get(0),cmd);
                else
                    plotter = new TracePlotter(varList,cmd);
            } catch (Exception e) {
                {if (true) throw new ParseException(e.getMessage());}
            }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FILETYPE:
        jj_consume_token(FILETYPE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PNG:
          jj_consume_token(PNG);
                     plotter.fileType = PlotFileType.PNG;
          break;
        case JPG:
          jj_consume_token(JPG);
                     plotter.fileType = PlotFileType.JPG;
          break;
        case PDF:
          jj_consume_token(PDF);
                     plotter.fileType = PlotFileType.PDF;
          break;
        case TEX:
          jj_consume_token(TEX);
                     plotter.fileType = PlotFileType.TEX;
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case STAT:
        jj_consume_token(STAT);
             plotter.plotStats  = true;
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AVERAGE:
          jj_consume_token(AVERAGE);
                         plotter.stat = StatType.AVERAGE;
          break;
        case VARIANCE:
          jj_consume_token(VARIANCE);
                          plotter.stat = StatType.VARIANCE;
          break;
        case STDDEV:
          jj_consume_token(STDDEV);
                        plotter.stat = StatType.STDDEV;
          break;
        case CV:
          jj_consume_token(CV);
                    plotter.stat = StatType.CV;
          break;
        case FANO:
          jj_consume_token(FANO);
                      plotter.stat = StatType.FANO;
          break;
        case SKEW:
          jj_consume_token(SKEW);
                      plotter.stat = StatType.SKEW;
          break;
        case KURTOSIS:
          jj_consume_token(KURTOSIS);
                          plotter.stat = StatType.KURTOSIS;
          break;
        case STDERR:
          jj_consume_token(STDERR);
                        plotter.stat = StatType.STDERR;
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FILE:
        jj_consume_token(FILE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(FILENAME);
              plotter.filename = t.image; plotter.plotToFile = true;
        break;
      case TRAJECTORY:
        jj_consume_token(TRAJECTORY);
             plotter.plotStats  = false;
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
                  i = Integer.parseInt(t.image); plotter.singleTrajectory = i;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            t = jj_consume_token(INTEGER);
                      j = Integer.parseInt(t.image); plotter.firstTrajectory = i; plotter.lastTrajectory = j;
            break;
          default:
            jj_la1[63] = jj_gen;
            ;
          }
          break;
        case S_OPEN:
          idList = IntegerList();
                  plotter.trajectoryList = idList;
          break;
        case ALL:
          jj_consume_token(ALL);
                  plotter.allTrajectories = true;
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case VARS:
        jj_consume_token(VARS);
        jj_consume_token(ASSIGN);
        stringList = SymbolList();
              plotter.varsToPlot = stringList;
        break;
      case TIME:
        jj_consume_token(TIME);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
                  d = Double.parseDouble(t.image); plotter.timePoint = d;
          break;
        case FINAL:
          jj_consume_token(FINAL);
                plotter.timePoint = TracePlotter.FINAL_STATE;
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case X:
      case XVAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case X:
          jj_consume_token(X);
          break;
        case XVAR:
          jj_consume_token(XVAR);
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        t = jj_consume_token(IDENTIFIER);
              plotter.xVar = t.image;
        break;
      case FIX:
        jj_consume_token(FIX);
        jj_consume_token(ASSIGN);
              stringList = new ArrayList<String>(); valueLists = new ArrayList<ArrayList<Double>>();
        ParamValueList(stringList,valueLists);
              plotter.fixedParams = stringList; plotter.fixedParamsValues = valueLists;
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_CLOSE);
        cmd.plot(plotter,varList);
  }

////////////////////////////////////////////////////////////////////////////
/////////   PHASE PLOTTER
////////////////////////////////////////////////////////////////////////////
  final public void PhasePlot() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   int i,j;
   double d;
   String var;
   PhasePlotter plotter;
   ArrayList<Integer> idList = new ArrayList<Integer>();
   ArrayList<String> stringList;
   ArrayList<ArrayList<Double>> valueLists;
    jj_consume_token(PHASEPLOT);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
        var = t.image;
        try {
            plotter = new PhasePlotter(var,cmd);
        } catch (Exception e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FILETYPE:
        jj_consume_token(FILETYPE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PNG:
          jj_consume_token(PNG);
                     plotter.fileType = PlotFileType.PNG;
          break;
        case JPG:
          jj_consume_token(JPG);
                     plotter.fileType = PlotFileType.JPG;
          break;
        case PDF:
          jj_consume_token(PDF);
                     plotter.fileType = PlotFileType.PDF;
          break;
        case TEX:
          jj_consume_token(TEX);
                     plotter.fileType = PlotFileType.TEX;
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case STAT:
        jj_consume_token(STAT);
             plotter.plotStats  = true;
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AVERAGE:
          jj_consume_token(AVERAGE);
                         plotter.stat = StatType.AVERAGE;
          break;
        case VARIANCE:
          jj_consume_token(VARIANCE);
                          plotter.stat = StatType.VARIANCE;
          break;
        case STDDEV:
          jj_consume_token(STDDEV);
                        plotter.stat = StatType.STDDEV;
          break;
        case CV:
          jj_consume_token(CV);
                    plotter.stat = StatType.CV;
          break;
        case FANO:
          jj_consume_token(FANO);
                      plotter.stat = StatType.FANO;
          break;
        case SKEW:
          jj_consume_token(SKEW);
                      plotter.stat = StatType.SKEW;
          break;
        case KURTOSIS:
          jj_consume_token(KURTOSIS);
                          plotter.stat = StatType.KURTOSIS;
          break;
        case STDERR:
          jj_consume_token(STDERR);
                        plotter.stat = StatType.STDERR;
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FILE:
        jj_consume_token(FILE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(FILENAME);
              plotter.filename = t.image; plotter.plotToFile = true;
        break;
      case TRAJECTORY:
        jj_consume_token(TRAJECTORY);
             plotter.plotStats  = false;
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
                  i = Integer.parseInt(t.image); idList.add(i); plotter.trajectoryList = idList;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            t = jj_consume_token(INTEGER);
                        j = Integer.parseInt(t.image);
                        for (int k = i+1;k<=j;k++)
                            idList.add(k);
            break;
          default:
            jj_la1[71] = jj_gen;
            ;
          }
          break;
        case S_OPEN:
          idList = IntegerList();
                  plotter.trajectoryList = idList;
          break;
        case ALL:
          jj_consume_token(ALL);
                  plotter.allTrajectories = true;
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case X:
      case XVAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case X:
          jj_consume_token(X);
          break;
        case XVAR:
          jj_consume_token(XVAR);
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        t = jj_consume_token(IDENTIFIER);
              plotter.xvar = t.image;
        break;
      case Y:
      case YVAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Y:
          jj_consume_token(Y);
          break;
        case YVAR:
          jj_consume_token(YVAR);
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        t = jj_consume_token(IDENTIFIER);
              plotter.yvar = t.image;
        break;
      case Z:
      case ZVAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Z:
          jj_consume_token(Z);
          break;
        case ZVAR:
          jj_consume_token(ZVAR);
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        t = jj_consume_token(IDENTIFIER);
              plotter.zvar = t.image;
        break;
      case FIX:
        jj_consume_token(FIX);
        jj_consume_token(ASSIGN);
              stringList = new ArrayList<String>(); valueLists = new ArrayList<ArrayList<Double>>();
        ParamValueList(stringList,valueLists);
              plotter.fixedParams = stringList; plotter.fixedParamsValues = valueLists;
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_CLOSE);
        cmd.plot(plotter,var);
  }

////////////////////////////////////////////////////////////////////////////
/////////   HISTOGRAM PLOTTER
////////////////////////////////////////////////////////////////////////////
  final public void Hist() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   int i,j;
   double d;
   String var;
   HistPlotter plotter;
   ArrayList<String> stringList;
    jj_consume_token(HIST);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
        var = t.image;
        try {
            plotter = new HistPlotter(var,cmd);
        } catch (Exception e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FILETYPE:
        jj_consume_token(FILETYPE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PNG:
          jj_consume_token(PNG);
                     plotter.fileType = PlotFileType.PNG;
          break;
        case JPG:
          jj_consume_token(JPG);
                     plotter.fileType = PlotFileType.JPG;
          break;
        case PDF:
          jj_consume_token(PDF);
                     plotter.fileType = PlotFileType.PDF;
          break;
        case TEX:
          jj_consume_token(TEX);
                     plotter.fileType = PlotFileType.TEX;
          break;
        default:
          jj_la1[78] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FILE:
        jj_consume_token(FILE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(FILENAME);
              plotter.filename = t.image; plotter.plotToFile = true;
        break;
      case VARS:
        jj_consume_token(VARS);
        jj_consume_token(ASSIGN);
        stringList = SymbolList();
              plotter.varsToPlot = stringList;
        break;
      case TIME:
        jj_consume_token(TIME);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case FLOAT:
        case FLOAT_SCIENTIFIC:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            t = jj_consume_token(INTEGER);
            break;
          case FLOAT:
            t = jj_consume_token(FLOAT);
            break;
          case FLOAT_SCIENTIFIC:
            t = jj_consume_token(FLOAT_SCIENTIFIC);
            break;
          default:
            jj_la1[79] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                  d = Double.parseDouble(t.image); plotter.timePoint = d;
          break;
        case FINAL:
          jj_consume_token(FINAL);
                plotter.timePoint = TracePlotter.FINAL_STATE;
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case BINS:
        jj_consume_token(BINS);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); plotter.bins = i; plotter.autoBin = false;
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_CLOSE);
        cmd.plot(plotter,var);
  }

////////////////////////////////////////////////////////////////////////////
/////////   SURFACE PLOTTER
////////////////////////////////////////////////////////////////////////////
  final public void Plot3d() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   int i,j;
   double d;
   String var;
   SurfacePlotter plotter;
   ArrayList<String> stringList;
   ArrayList<ArrayList<Double>> valueLists;
    jj_consume_token(PLOT3D);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
        var = t.image;
        try {
            plotter = new SurfacePlotter(var,cmd);
        } catch (Exception e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FILETYPE:
        jj_consume_token(FILETYPE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PNG:
          jj_consume_token(PNG);
                     plotter.fileType = PlotFileType.PNG;
          break;
        case JPG:
          jj_consume_token(JPG);
                     plotter.fileType = PlotFileType.JPG;
          break;
        case PDF:
          jj_consume_token(PDF);
                     plotter.fileType = PlotFileType.PDF;
          break;
        case TEX:
          jj_consume_token(TEX);
                     plotter.fileType = PlotFileType.TEX;
          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case STAT:
        jj_consume_token(STAT);
             plotter.plotStats  = true;
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AVERAGE:
          jj_consume_token(AVERAGE);
                         plotter.stat = StatType.AVERAGE;
          break;
        case VARIANCE:
          jj_consume_token(VARIANCE);
                          plotter.stat = StatType.VARIANCE;
          break;
        case STDDEV:
          jj_consume_token(STDDEV);
                        plotter.stat = StatType.STDDEV;
          break;
        case CV:
          jj_consume_token(CV);
                    plotter.stat = StatType.CV;
          break;
        case FANO:
          jj_consume_token(FANO);
                      plotter.stat = StatType.FANO;
          break;
        case SKEW:
          jj_consume_token(SKEW);
                      plotter.stat = StatType.SKEW;
          break;
        case KURTOSIS:
          jj_consume_token(KURTOSIS);
                          plotter.stat = StatType.KURTOSIS;
          break;
        case STDERR:
          jj_consume_token(STDERR);
                        plotter.stat = StatType.STDERR;
          break;
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FILE:
        jj_consume_token(FILE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(FILENAME);
              plotter.filename = t.image; plotter.plotToFile = true;
        break;
      case TYPE:
        jj_consume_token(TYPE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLORMAP:
          jj_consume_token(COLORMAP);
                           plotter.plotType = SurfacePlotter.COLORMAP;
          break;
        case SURFACE:
          jj_consume_token(SURFACE);
                          plotter.plotType = SurfacePlotter.SURFACE;
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case X:
      case XVAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case X:
          jj_consume_token(X);
          break;
        case XVAR:
          jj_consume_token(XVAR);
          break;
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        t = jj_consume_token(IDENTIFIER);
              plotter.xvar = t.image;
        break;
      case Y:
      case YVAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Y:
          jj_consume_token(Y);
          break;
        case YVAR:
          jj_consume_token(YVAR);
          break;
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        t = jj_consume_token(IDENTIFIER);
              plotter.yvar = t.image;
        break;
      case Z:
      case ZVAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Z:
          jj_consume_token(Z);
          break;
        case ZVAR:
          jj_consume_token(ZVAR);
          break;
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        t = jj_consume_token(IDENTIFIER);
              plotter.zvar = t.image;
        break;
      case FIX:
        jj_consume_token(FIX);
        jj_consume_token(ASSIGN);
              stringList = new ArrayList<String>(); valueLists = new ArrayList<ArrayList<Double>>();
        ParamValueList(stringList,valueLists);
              plotter.fixedParams = stringList; plotter.fixedParamsValues = valueLists;
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_CLOSE);
        cmd.plot(plotter,var);
  }

////////////////////////////////////////////////////////////////////////////
/////////   MC
////////////////////////////////////////////////////////////////////////////
  final public void MC(String outVar) throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t,t1;
   int i,j;
   double d,d1;
   ModelCheckerManager manager;
   String variable;
   long l;
   ArrayList<String> formulaList = null;
    jj_consume_token(MC);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
        variable = t.image;
        try {
          manager = new ModelCheckerManager(variable,outVar,cmd);
        } catch (Exception e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADAPTIVE:
        jj_consume_token(ADAPTIVE);
                         manager.adaptive = true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          t = jj_consume_token(INTEGER);
                  i = Integer.parseInt(t.image); manager.adaptiveStep = i;
          break;
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        break;
      case CHERNOFF:
        jj_consume_token(CHERNOFF);
                         manager.setChernoff();
        break;
      case BAYESIAN:
        jj_consume_token(BAYESIAN);
                         manager.setBayesian();
        break;
      case RUNS:
        jj_consume_token(RUNS);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              l = Long.parseLong(t.image); manager.setSamples(l);
        break;
      case POINTWISE:
        jj_consume_token(POINTWISE);
                          manager.type = SMCtype.POINTWISE;
        break;
      case SIGNAL:
        jj_consume_token(SIGNAL);
                       manager.type = SMCtype.SIGNAL;
        break;
      case ROBUST:
        jj_consume_token(ROBUST);
                       manager.type = SMCtype.ROBUST;
        break;
      case CONFIDENCE:
        jj_consume_token(CONFIDENCE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[92] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.confidence = d;
        break;
      case ERROR:
        jj_consume_token(ERROR);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.error = d;
        break;
      case BOUNDS:
        jj_consume_token(BOUNDS);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WILSON:
          jj_consume_token(WILSON);
                        manager.confidenceType = ConfidenceBoundsMethod.WILSON;
          break;
        case NORMAL:
          jj_consume_token(NORMAL);
                        manager.confidenceType = ConfidenceBoundsMethod.NORMAL;
          break;
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case TIME:
        jj_consume_token(TIME);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[95] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.finalTime = d;
        break;
      case ODE:
      case HYBRID:
      case GB:
      case SSA:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ODE:
          jj_consume_token(ODE);
                     manager.simType = SimType.ODE;
          break;
        case HYBRID:
          jj_consume_token(HYBRID);
                        manager.simType = SimType.HYBRID;
          break;
        case SSA:
          jj_consume_token(SSA);
                     manager.simType = SimType.SSA;
          break;
        case GB:
          jj_consume_token(GB);
                    manager.simType = SimType.GB;
          break;
        default:
          jj_la1[96] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FORMULA:
        jj_consume_token(FORMULA);
        jj_consume_token(ASSIGN);
        formulaList = SymbolList();
              manager.formulae = formulaList;
        break;
      case PRIOR:
        jj_consume_token(PRIOR);
        jj_consume_token(ASSIGN);
        jj_consume_token(R_OPEN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[97] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.priorGood = d;
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[98] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.priorBad = d;
        jj_consume_token(R_CLOSE);
        break;
      case REGULARISE:
        jj_consume_token(REGULARISE);
              manager.regularise = true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          jj_consume_token(R_OPEN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            t = jj_consume_token(INTEGER);
            break;
          case FLOAT:
            t = jj_consume_token(FLOAT);
            break;
          case FLOAT_SCIENTIFIC:
            t = jj_consume_token(FLOAT_SCIENTIFIC);
            break;
          default:
            jj_la1[99] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                  d = Double.parseDouble(t.image); manager.priorGood = d;
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            t = jj_consume_token(INTEGER);
            break;
          case FLOAT:
            t = jj_consume_token(FLOAT);
            break;
          case FLOAT_SCIENTIFIC:
            t = jj_consume_token(FLOAT_SCIENTIFIC);
            break;
          default:
            jj_la1[100] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                  d = Double.parseDouble(t.image); manager.priorBad = d;
          jj_consume_token(R_CLOSE);
          break;
        default:
          jj_la1[101] = jj_gen;
          ;
        }
        break;
      case SIGNIFICANCE:
      case TYPEI:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIGNIFICANCE:
          jj_consume_token(SIGNIFICANCE);
          break;
        case TYPEI:
          jj_consume_token(TYPEI);
          break;
        default:
          jj_la1[102] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[103] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.significance = d;
        break;
      case POWER:
        jj_consume_token(POWER);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[104] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.power = d;
        break;
      case TYPEII:
        jj_consume_token(TYPEII);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[105] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.power = 1-d;
        break;
      case INDIFFERENCE:
        jj_consume_token(INDIFFERENCE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[106] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image); manager.epsilon = d;
        break;
      case MAX:
        jj_consume_token(MAX);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              l = Long.parseLong(t.image); manager.maxRuns = l;
        break;
      case POINTS:
        jj_consume_token(POINTS);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
              i = Integer.parseInt(t.image); manager.points = i;
        break;
      case EXPLORE:
        jj_consume_token(EXPLORE);
        jj_consume_token(ASSIGN);
        jj_consume_token(S_OPEN);
        t1 = jj_consume_token(MODEL_IDENTIFIER);
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[107] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d = Double.parseDouble(t.image);
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[108] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              d1 = Double.parseDouble(t.image);
                try {manager.setExplore(t1.image,d,d1);}
                catch(Exception e) {{if (true) throw new ParseException(e.getMessage());}}
        jj_consume_token(S_CLOSE);
        break;
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_CLOSE);
        if (formulaList == null)
            manager.setAllFormulas();
        else if (!manager.checkFormulaConsistency()) {
            String ff = manager.getInconsistentFormula();
            {if (true) throw new ParseException("Formula " + ff + " does not exist.");}
        }

        try {
            manager.check();
        } catch (Exception e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
  }

////////////////////////////////////////////////////////////////////////////
/////////   MC PLOTTER
////////////////////////////////////////////////////////////////////////////
  final public void PlotMC() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   int i,j;
   double d;
   ModelCheckingOutputManager plotter;
   String variable;
   ArrayList<String> formulaList  = null;
    jj_consume_token(MCPLOT);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
        variable = t.image;
        try {
          plotter = new ModelCheckingOutputManager(variable,cmd);
        } catch (Exception e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[110] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FILETYPE:
        jj_consume_token(FILETYPE);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PNG:
          jj_consume_token(PNG);
                     plotter.fileType = PlotFileType.PNG;
          break;
        case JPG:
          jj_consume_token(JPG);
                     plotter.fileType = PlotFileType.JPG;
          break;
        case PDF:
          jj_consume_token(PDF);
                     plotter.fileType = PlotFileType.PDF;
          break;
        case TEX:
          jj_consume_token(TEX);
                     plotter.fileType = PlotFileType.TEX;
          break;
        default:
          jj_la1[111] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FILE:
        jj_consume_token(FILE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(FILENAME);
              plotter.filename = t.image; plotter.plotToFile = true;
        break;
      case FORMULA:
        jj_consume_token(FORMULA);
        jj_consume_token(ASSIGN);
        formulaList = SymbolList();
              plotter.formulas = formulaList;
        break;
      case SIGNAL:
        jj_consume_token(SIGNAL);
                       plotter.plotSignals = true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          jj_consume_token(ALL);
               plotter.allSignals = true;
          break;
        default:
          jj_la1[112] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_CLOSE);
        plotter.finalise();
        cmd.plot(plotter,variable);
  }

////////////////////////////////////////////////////////////////////////////
/////////   MC SAVER
////////////////////////////////////////////////////////////////////////////
  final public void SaveMC() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   int i,j;
   double d;
   ModelCheckingOutputManager saver;
   String variable;
   ArrayList<String> formulaList  = null;
    jj_consume_token(MCSAVE);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
        variable = t.image;
        try {
          saver = new ModelCheckingOutputManager(variable,cmd);
        } catch (Exception e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[114] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FILE:
        jj_consume_token(FILE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(FILENAME);
              saver.filename = t.image;
        break;
      case FORMULA:
        jj_consume_token(FORMULA);
        jj_consume_token(ASSIGN);
        formulaList = SymbolList();
              saver.formulas = formulaList;
        break;
      case SIGNAL:
        jj_consume_token(SIGNAL);
                       saver.saveSignals();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          jj_consume_token(ALL);
               saver.allSignals = true;
          break;
        default:
          jj_la1[115] = jj_gen;
          ;
        }
        break;
      case SUMMARY:
        jj_consume_token(SUMMARY);
                        saver.saveSummary();
        break;
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_CLOSE);
        saver.finalise();
        cmd.save(saver,variable);
  }

////////////////////////////////////////////////////////////////////////////
/////////   SAVER
////////////////////////////////////////////////////////////////////////////
  final public void Save() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   int i,j;
   double d;
   ObjectSaver saver;
   String variable;
   ArrayList<String> varList;
    jj_consume_token(SAVE);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
        variable = t.image;
        try {
          saver = new ObjectSaver(variable,cmd);
        } catch (Exception e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAT:
        jj_consume_token(STAT);
             saver.saveStats  = true;
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AVERAGE:
          jj_consume_token(AVERAGE);
                         saver.stat = StatType.AVERAGE;
          break;
        case VARIANCE:
          jj_consume_token(VARIANCE);
                          saver.stat = StatType.VARIANCE;
          break;
        case STDDEV:
          jj_consume_token(STDDEV);
                        saver.stat = StatType.STDDEV;
          break;
        case CV:
          jj_consume_token(CV);
                    saver.stat = StatType.CV;
          break;
        case FANO:
          jj_consume_token(FANO);
                      saver.stat = StatType.FANO;
          break;
        case SKEW:
          jj_consume_token(SKEW);
                      saver.stat = StatType.SKEW;
          break;
        case KURTOSIS:
          jj_consume_token(KURTOSIS);
                          saver.stat = StatType.KURTOSIS;
          break;
        case STDERR:
          jj_consume_token(STDERR);
                        saver.stat = StatType.STDERR;
          break;
        default:
          jj_la1[118] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case VARS:
        jj_consume_token(VARS);
        jj_consume_token(ASSIGN);
        varList = SymbolList();
              saver.varsToSave = varList;
        break;
      case FILE:
        jj_consume_token(FILE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(FILENAME);
              saver.filename = t.image;
        break;
      case TRAJECTORY:
        jj_consume_token(TRAJECTORY);
             saver.saveStats  = false;
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
                  i = Integer.parseInt(t.image); saver.trajectoryId = i;
          break;
        case ALL:
          jj_consume_token(ALL);
                  saver.allTrajectories = true;
          break;
        default:
          jj_la1[119] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case TIME:
        jj_consume_token(TIME);
             saver.saveStats  = true;
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
                  d = Double.parseDouble(t.image); saver.saveTime = d;
          break;
        case FINAL:
          jj_consume_token(FINAL);
                saver.saveFinalStateOnly = true;
          break;
        default:
          jj_la1[120] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case TYPE:
      case FLAT:
      case SBML:
      case MATLAB:
      case MATLAB_LN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPE:
          jj_consume_token(TYPE);
          jj_consume_token(ASSIGN);
          break;
        default:
          jj_la1[121] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLAT:
          jj_consume_token(FLAT);
                  saver.modelType = ObjectSaver.FLAT;
          break;
        case SBML:
          jj_consume_token(SBML);
                  saver.modelType = ObjectSaver.SBML;
          break;
        case MATLAB:
          jj_consume_token(MATLAB);
                  saver.modelType = ObjectSaver.MATLAB;
          break;
        case MATLAB_LN:
          jj_consume_token(MATLAB_LN);
                  saver.modelType = ObjectSaver.MATLAB_LN;
          break;
        default:
          jj_la1[122] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(R_CLOSE);
        cmd.save(saver,variable);
  }

////////////////////////////////////////////////////////////////////////////
/////////   SETTER
////////////////////////////////////////////////////////////////////////////
  final public void Set() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   String variable;
    jj_consume_token(SET);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
        variable = t.image;
    jj_consume_token(COMMA);
    AssignmentList(variable);
    jj_consume_token(R_CLOSE);
  }

////////////////////////////////////////////////////////////////////////////
/////////   HELP
////////////////////////////////////////////////////////////////////////////
  final public void Help() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   String c = null;
    jj_consume_token(HELP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FILENAME:
      t = jj_consume_token(FILENAME);
                      c = t.image;
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
        if (c == null)
            cmd.help();
        else
            cmd.help(c);
  }

  final public void Free() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
    jj_consume_token(FREE);
    jj_consume_token(R_OPEN);
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(R_CLOSE);
        cmd.free(t.image);
  }

////////////////////////////////////////////////////////////////////////////////////
//////////////////////       LIST LOADERS
////////////////////////////////////////////////////////////////////////////////////
  final public void ParamValueList(ArrayList<String> paramList, ArrayList<ArrayList<Double>> valueLists) throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   int i,k;
   boolean log;
   double v1,v2;
   ArrayList<Double> list;
    jj_consume_token(S_OPEN);
    t = jj_consume_token(MODEL_IDENTIFIER);
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_OPEN_LIST:
      list = InnerNumberList();
          paramList.add(t.image); valueLists.add(list);
      break;
    case INTEGER:
    case FLOAT:
    case FLOAT_SCIENTIFIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case FLOAT_SCIENTIFIC:
        t = jj_consume_token(FLOAT_SCIENTIFIC);
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          v1 = Double.parseDouble(t.image); log = false;
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case FLOAT_SCIENTIFIC:
        t = jj_consume_token(FLOAT_SCIENTIFIC);
        break;
      default:
        jj_la1[126] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          v2 = Double.parseDouble(t.image);
      jj_consume_token(DIESIS);
      t = jj_consume_token(INTEGER);
          k = Integer.parseInt(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOG:
        jj_consume_token(LOG);
                 log = true;
        break;
      default:
        jj_la1[127] = jj_gen;
        ;
      }
            list = generateList(v1,v2,k,log);
            paramList.add(t.image);
            valueLists.add(list);
      break;
    default:
      jj_la1[128] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[129] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(MODEL_IDENTIFIER);
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_OPEN_LIST:
        list = InnerNumberList();
          paramList.add(t.image); valueLists.add(list);
        break;
      case INTEGER:
      case FLOAT:
      case FLOAT_SCIENTIFIC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[130] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          v1 = Double.parseDouble(t.image); log = false;
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[131] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          v2 = Double.parseDouble(t.image);
        jj_consume_token(DIESIS);
        t = jj_consume_token(INTEGER);
          k = Integer.parseInt(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOG:
          jj_consume_token(LOG);
                 log = true;
          break;
        default:
          jj_la1[132] = jj_gen;
          ;
        }
            list = generateList(v1,v2,k,log);
            paramList.add(t.image);
            valueLists.add(list);
        break;
      default:
        jj_la1[133] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(S_CLOSE);
  }

  final public ArrayList<Integer> IntegerList() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   int i;
   ArrayList<Integer> list = new ArrayList<Integer>();
    jj_consume_token(S_OPEN);
    t = jj_consume_token(INTEGER);
      i = Integer.parseInt(t.image); list.add(i);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[134] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(INTEGER);
          i = Integer.parseInt(t.image); list.add(i);
    }
    jj_consume_token(S_CLOSE);
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Double> InnerNumberList() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   double d;
   ArrayList<Double> list = new ArrayList<Double>();
    jj_consume_token(S_OPEN_LIST);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case FLOAT_SCIENTIFIC:
      t = jj_consume_token(FLOAT_SCIENTIFIC);
      break;
    default:
      jj_la1[135] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      d = Double.parseDouble(t.image); list.add(d);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case FLOAT_SCIENTIFIC:
        t = jj_consume_token(FLOAT_SCIENTIFIC);
        break;
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           d = Double.parseDouble(t.image); list.add(d);
    }
    jj_consume_token(S_CLOSE_LIST);
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Double> NumberList() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   double d;
   ArrayList<Double> list = new ArrayList<Double>();
    jj_consume_token(S_OPEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case FLOAT_SCIENTIFIC:
      t = jj_consume_token(FLOAT_SCIENTIFIC);
      break;
    default:
      jj_la1[138] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      d = Double.parseDouble(t.image); list.add(d);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[139] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case FLOAT_SCIENTIFIC:
        t = jj_consume_token(FLOAT_SCIENTIFIC);
        break;
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           d = Double.parseDouble(t.image); list.add(d);
    }
    jj_consume_token(S_CLOSE);
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> SymbolList() throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t;
   ArrayList<String> list = new ArrayList<String>();
    jj_consume_token(S_OPEN);
    t = jj_consume_token(MODEL_IDENTIFIER);
      list.add(t.image);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[141] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(MODEL_IDENTIFIER);
          list.add(t.image);
    }
    jj_consume_token(S_CLOSE);
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public void AssignmentList(String modelVar) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    String p;
    double v;
    jj_consume_token(S_OPEN);
    t = jj_consume_token(MODEL_IDENTIFIER);
     p = t.image;
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case FLOAT_SCIENTIFIC:
      t = jj_consume_token(FLOAT_SCIENTIFIC);
      break;
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      v = Double.parseDouble(t.image); cmd.changeSymbolValue(modelVar,p,v);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[143] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(MODEL_IDENTIFIER);
         p = t.image;
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case FLOAT_SCIENTIFIC:
        t = jj_consume_token(FLOAT_SCIENTIFIC);
        break;
      default:
        jj_la1[144] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          v = Double.parseDouble(t.image); cmd.changeSymbolValue(modelVar,p,v);
    }
    jj_consume_token(S_CLOSE);
  }

  final public void RangeList(ExplorationManager manager) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    int k;
    double v1,v2;
    String p;
    boolean log = false;
    ArrayList<Double> valueList;
    jj_consume_token(S_OPEN);
    t = jj_consume_token(MODEL_IDENTIFIER);
     p = t.image; log = false;
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case FLOAT_SCIENTIFIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case FLOAT_SCIENTIFIC:
        t = jj_consume_token(FLOAT_SCIENTIFIC);
        break;
      default:
        jj_la1[145] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          v1 = Double.parseDouble(t.image);
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case FLOAT_SCIENTIFIC:
        t = jj_consume_token(FLOAT_SCIENTIFIC);
        break;
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          v2 = Double.parseDouble(t.image);
      jj_consume_token(DIESIS);
      t = jj_consume_token(INTEGER);
          k = Integer.parseInt(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOG:
        jj_consume_token(LOG);
                 log = true;
        break;
      default:
        jj_la1[147] = jj_gen;
        ;
      }
            try {
                manager.addParamRange(p,v1,v2,k,log);
            } catch (Exception e) {
                {if (true) throw new ParseException(e.getMessage());}
            }
      break;
    case S_OPEN_LIST:
      valueList = InnerNumberList();
            try {
               manager.addParamRange(p,valueList);
            } catch (Exception e) {
                {if (true) throw new ParseException(e.getMessage());}
            }
      break;
    default:
      jj_la1[148] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[149] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(MODEL_IDENTIFIER);
         p = t.image; log = false;
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case FLOAT_SCIENTIFIC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[150] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              v1 = Double.parseDouble(t.image);
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
          break;
        case FLOAT_SCIENTIFIC:
          t = jj_consume_token(FLOAT_SCIENTIFIC);
          break;
        default:
          jj_la1[151] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              v2 = Double.parseDouble(t.image);
        jj_consume_token(DIESIS);
        t = jj_consume_token(INTEGER);
              k = Integer.parseInt(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOG:
          jj_consume_token(LOG);
                     log = true;
          break;
        default:
          jj_la1[152] = jj_gen;
          ;
        }
                try {
                    manager.addParamRange(p,v1,v2,k,log);
                } catch (Exception e) {
                    {if (true) throw new ParseException(e.getMessage());}
                }
        break;
      case S_OPEN_LIST:
        valueList = InnerNumberList();
                try {
                   manager.addParamRange(p,valueList);
                } catch (Exception e) {
                    {if (true) throw new ParseException(e.getMessage());}
                }
        break;
      default:
        jj_la1[153] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(S_CLOSE);
  }

////////////////////////////////////////////////////////////
////////    Linear Noise Query List
////////////////////////////////////////////////////////////
  final public void LinearNoiseQueryList(LinearNoiseQueryManager manager) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    jj_consume_token(SQ_OPEN);
    LinearNoiseQuery(manager);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[154] = jj_gen;
        break label_21;
      }
      jj_consume_token(COMMA);
      LinearNoiseQuery(manager);
    }
    jj_consume_token(SQ_CLOSE);
  }

  final public void LinearNoiseQuery(LinearNoiseQueryManager manager) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2,t;
    double N;
    double v1=0,v2=0;
    String av;
    String var;
    boolean greater=false,interval;
    boolean onPop = true;
    boolean plus = true;
    jj_consume_token(R_OPEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case MODEL_IDENTIFIER:
      t = jj_consume_token(MODEL_IDENTIFIER);
      break;
    default:
      jj_la1[155] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (manager.isParameter(t.image))
            N = manager.getParameterValue(t.image);
        else N = Double.parseDouble(t.image);
    jj_consume_token(COMMA);
      t1 = null; t2 = null; av = ""; var = ""; plus = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
               plus = false;
      break;
    default:
      jj_la1[156] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t1 = jj_consume_token(INTEGER);
      break;
    case FLOAT:
      t1 = jj_consume_token(FLOAT);
      break;
    case MODEL_IDENTIFIER:
      t1 = jj_consume_token(MODEL_IDENTIFIER);
      break;
    default:
      jj_la1[157] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
      jj_consume_token(TIMES);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t2 = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t2 = jj_consume_token(FLOAT);
        break;
      case MODEL_IDENTIFIER:
        t2 = jj_consume_token(MODEL_IDENTIFIER);
        break;
      default:
        jj_la1[158] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[159] = jj_gen;
      ;
    }
        if (t2 == null) {
            if (manager.isParameter(t1.image) || manager.isNumber(t1.image)) {
                av += (av.equals("") ? (plus?"":"-") + t1.image : (plus?" + ":" - ") + t1.image);
            }
            else if (manager.isVariable(t1.image)) {
                av += (av.equals("") ? (plus?"":"-") + t1.image : (plus?" + ":" - ") + t1.image);
                var +=  (var.equals("") ?  manager.convertForStdev(t1.image) : " + " + manager.convertForStdev(t1.image));
            }
            else
                {if (true) throw new ParseException("Query expressions can contain only numbers, vars and params, and must be linear. Symbol not allowed" + t1.image);}
        } else  {
            if ( manager.isVariable(t1.image) && manager.isVariable(t2.image))
                {if (true) throw new ParseException("Query expressions can contain only numbers, vars and params, and must be linear. nonlinear term: " + t1.image + " * " + t2.image);}
            else if ( !manager.isVariable(t1.image) && !manager.isVariable(t2.image))
                {if (true) throw new ParseException("Query expressions can contain only numbers, vars and params, and must be linear. at least one variable in a product: " + t1.image + " * " + t2.image);}
            else if ( !manager.isAllowed(t1.image) || !manager.isAllowed(t2.image))
                {if (true) throw new ParseException("Query expressions can contain only numbers, vars and params, and must be linear. unknown term in: " + t1.image + " * " + t2.image);}
            else {
                var += (var.equals("") ? manager.convertForStdev(t1.image) + " * " + manager.convertForStdev(t2.image) :
                        " + " + manager.convertForStdev(t1.image) + " * " + manager.convertForStdev(t2.image));
                av += (av.equals("") ? (plus?"":"-") + t1.image + " * " + t2.image :
                        (plus?" + ":" - ") + t1.image + " * " + t2.image);
            }
        }
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[160] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                  plus = true;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                           plus = false;
        break;
      default:
        jj_la1[161] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          t1 = null; t2 = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t1 = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t1 = jj_consume_token(FLOAT);
        break;
      case MODEL_IDENTIFIER:
        t1 = jj_consume_token(MODEL_IDENTIFIER);
        break;
      default:
        jj_la1[162] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t2 = jj_consume_token(INTEGER);
          break;
        case FLOAT:
          t2 = jj_consume_token(FLOAT);
          break;
        case MODEL_IDENTIFIER:
          t2 = jj_consume_token(MODEL_IDENTIFIER);
          break;
        default:
          jj_la1[163] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[164] = jj_gen;
        ;
      }
            if (t2 == null) {
                if (manager.isParameter(t1.image) || manager.isNumber(t1.image)) {
                    av += (av.equals("") ? (plus?"":"-") + t1.image : (plus?" + ":" - ") + t1.image);
                }
                else if (manager.isVariable(t1.image)) {
                    av += (av.equals("") ? (plus?"":"-") + t1.image : (plus?" + ":" - ") + t1.image);
                    var +=  (var.equals("") ?  manager.convertForStdev(t1.image) : " + " + manager.convertForStdev(t1.image));
                }
                else
                    {if (true) throw new ParseException("Query expressions can contain only numbers, vars and params, and must be linear. Symbol not allowed" + t1.image);}
            } else  {
                if ( manager.isVariable(t1.image) && manager.isVariable(t2.image))
                    {if (true) throw new ParseException("Query expressions can contain only numbers, vars and params, and must be linear. nonlinear term: " + t1.image + " * " + t2.image);}
                else if ( !manager.isVariable(t1.image) && !manager.isVariable(t2.image))
                    {if (true) throw new ParseException("Query expressions can contain only numbers, vars and params, and must be linear. at least one variable in a product: " + t1.image + " * " + t2.image);}
                else if ( !manager.isAllowed(t1.image) || !manager.isAllowed(t2.image))
                    {if (true) throw new ParseException("Query expressions can contain only numbers, vars and params, and must be linear. unknown term in: " + t1.image + " * " + t2.image);}
                else {
                    var += (var.equals("") ? manager.convertForStdev(t1.image) + " * " + manager.convertForStdev(t2.image) :
                            " + " + manager.convertForStdev(t1.image) + " * " + manager.convertForStdev(t2.image));
                    av += (av.equals("") ? (plus?"":"-") + t1.image + " * " + t2.image :
                            (plus?" + ":" - ") + t1.image + " * " + t2.image);
                }
            }
    }
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREATER:
      jj_consume_token(GREATER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case MODEL_IDENTIFIER:
        t = jj_consume_token(MODEL_IDENTIFIER);
        break;
      default:
        jj_la1[165] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          interval = false; greater = true;
          if (manager.isNumber(t.image) )
                v1 = Double.parseDouble(t.image);
          else
                v1 = manager.getParameterValue(t.image);
      break;
    case LESS:
      jj_consume_token(LESS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case MODEL_IDENTIFIER:
        t = jj_consume_token(MODEL_IDENTIFIER);
        break;
      default:
        jj_la1[166] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          interval = false; greater = false;
          if (manager.isNumber(t.image) )
                v1 = Double.parseDouble(t.image);
          else
                v1 = manager.getParameterValue(t.image);
      break;
    case SQ_OPEN_INT:
      jj_consume_token(SQ_OPEN_INT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t1 = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t1 = jj_consume_token(FLOAT);
        break;
      case MODEL_IDENTIFIER:
        t1 = jj_consume_token(MODEL_IDENTIFIER);
        break;
      default:
        jj_la1[167] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t2 = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t2 = jj_consume_token(FLOAT);
        break;
      case MODEL_IDENTIFIER:
        t2 = jj_consume_token(MODEL_IDENTIFIER);
        break;
      default:
        jj_la1[168] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SQ_CLOSE_INT);
          interval = true;
          if (manager.isNumber(t1.image) )
                v1 = Double.parseDouble(t1.image);
          else
                v1 = manager.getParameterValue(t1.image);
          if (manager.isNumber(t2.image) )
                v2 = Double.parseDouble(t2.image);
          else
                v2 = manager.getParameterValue(t2.image);
      break;
    default:
      jj_la1[169] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      jj_consume_token(NORM);
                      onPop = false;
      break;
    default:
      jj_la1[170] = jj_gen;
      ;
    }
    jj_consume_token(R_CLOSE);
      if (interval) manager.addQuery(av,var,N,v1,v2,onPop);
      else manager.addQuery(av,var,N,v1,greater,onPop);
  }

  /** Generated Token Manager. */
  public ScriptParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[171];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x3280800,0xffff800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0x0,0x0,0x0,0xe0,0xe0,0x0,0x4000,0x0,0x0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0x0,0x0,0x0,0x0,0x1000000,0x0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0x0,0x0,0xe0,0xe0,0x0,0x40000000,0x81004000,0x0,0x0,0x0,0x0,0x20,0xe0,0x0,0xf0000000,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0xe0000000,0x0,0x0,0xe0,0xe0,0x90000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0000000,0x0,0x0,0xe0,0xe0,0x0,0xe0,0x0,0xe0,0xe0,0xe0,0xe0,0x0,0x0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0x200000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x20,0xe0,0x0,0x0,0xd0000000,0x0,0xe0,0xe0,0x0,0xe0,0x0,0xe0,0xe0,0x0,0xe0,0x0,0xe0,0x0,0xe0,0xe0,0x0,0xe0,0x0,0xe0,0x0,0xe0,0xe0,0xe0,0x0,0xe0,0x0,0xe0,0xe0,0x0,0xe0,0x0,0x60,0x0,0x60,0x60,0x0,0x0,0x0,0x60,0x60,0x0,0x60,0x60,0x60,0x60,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200200,0x0,0x0,0x0,0xbfdffc00,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fdb3800,0x0,0x400,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0xbfcbfc01,0x0,0x0,0x0,0x0,0x0,0x200000,0xc,0x90e,0x0,0x0,0x0,0x0,0x0,0xc,0x30,0xc0,0x1fe,0x0,0x0,0x0,0x200000,0x40000802,0x0,0x0,0x0,0x0,0xc,0x30,0xc0,0x5fe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x84800,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x400,0x0,0xd00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x6000,0x1000,0x201c0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x38,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38,0x1,0x8006,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf8fc0000,0x0,0x0,0x0,0x28000000,0x0,0x0,0x2c000000,0x0,0x0,0x0,0x0,0x0,0xf00,0xf00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000,0x80,0x80,0x0,0x0,0x0,0x3c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000,0x0,0x0,0x0,0x3c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000,0x80,0x0,0x0,0x0,0x80,0x3c00,0x0,0xf0000,0xff00000,0x0,0x80,0x0,0x0,0x0,0x0,0xf0000,0xff00000,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0xf0000,0x0,0x0,0x0,0x0,0xf0000,0xff00000,0x300,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x3c00,0x0,0x0,0x0,0x0,0x40000000,0x22,0x0,0x0,0x0,0x0,0x0,0x0,0x3c7f,0x0,0xf0000,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0xff00000,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x100,0x0,0x100,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x1,0x10,0x0,0x0,0x0,0x2,0x0,0x0,0x1,0x10,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x20,0x2,0x0,0x0,0x0,0x20,0x2,0x0,0x2,0x0,0x0,0x2,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x20,0x2,0x0,0x0,0x0,0x20,0x2,0x100000,0x4000,0x100000,0x100000,0x8000,0x6000,0x6000,0x100000,0x100000,0x8000,0x100000,0x100000,0x100000,0x100000,0x60400,0x2,};
   }

  /** Constructor with InputStream. */
  public ScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ScriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 171; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 171; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ScriptParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 171; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 171; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ScriptParser(ScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 171; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 171; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[150];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 171; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 150; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
