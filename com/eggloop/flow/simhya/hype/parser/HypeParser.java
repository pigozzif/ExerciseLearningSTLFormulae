/* Generated By:JavaCC: Do not edit this line. HypeParser.java */
package com.eggloop.flow.simhya.hype.parser;

import com.eggloop.flow.simhya.hype.*;
import java.util.ArrayList;
import com.eggloop.flow.simhya.simhya.matheval.Expression;


public class HypeParser implements HypeParserConstants {
    HypeModel model;

    public HypeParser() {
        this(new java.io.StringReader(""));
    }

    public HypeModel parseFromString( String modelDef ) throws ParseException, TokenMgrError, NumberFormatException {
        model = null;
        this.ReInit(new java.io.StringReader(modelDef));
        this.Start();
        return model;
    }

    public HypeModel parseFromFile( String filename ) throws ParseException, TokenMgrError, NumberFormatException {
        model = null;
        try { this.ReInit(new java.io.FileReader(filename)); }
        catch(java.io.IOException e) {throw new ParseException("Error while opening file " + filename + ": " + e); }
        this.Start();
        return model;
    }

/***********************************************
GRAMMAR RULES
***********************************************/
  final public void Start() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    String name = "model";
    Token t;
    boolean def = false, map = false, sub = false, comp = false, cont = false;
    jj_consume_token(KEYWORD_HYPE);
    jj_consume_token(KEYWORD_MODEL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
          name = t.image;
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
        model = new HypeModel(name);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SECTION_DEFINITIONS:
        jj_consume_token(SECTION_DEFINITIONS);
          def = true;
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case KEYWORD_VAR:
            Variable();
            break;
          case KEYWORD_PARAM:
            Parameter();
            break;
          case KEYWORD_GUARD:
            Guard();
            break;
          case KEYWORD_FUNCTION:
            Function();
            break;
          case KEYWORD_RESET:
            Reset();
            break;
          case KEYWORD_EXPR:
            Expression();
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case KEYWORD_VAR:
          case KEYWORD_PARAM:
          case KEYWORD_GUARD:
          case KEYWORD_FUNCTION:
          case KEYWORD_EXPR:
          case KEYWORD_RESET:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
        }
        break;
      case SECTION_MAPPINGS:
        jj_consume_token(SECTION_MAPPINGS);
          map = true;
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case KEYWORD_INFL:
            Influence();
            break;
          case KEYWORD_EVENT:
            Event();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case KEYWORD_INFL:
          case KEYWORD_EVENT:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
        }
        break;
      case SECTION_SUBCOMPONENTS:
        jj_consume_token(SECTION_SUBCOMPONENTS);
          sub = true;
        label_4:
        while (true) {
          if (jj_2_1(1)) {
            Subcomponent();
          } else if (jj_2_2(1)) {
            SubcomponentTemplate();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          if (jj_2_3(1)) {
            ;
          } else {
            break label_4;
          }
        }
        break;
      case SECTION_COMPONENTS:
        jj_consume_token(SECTION_COMPONENTS);
          comp = true;
        label_5:
        while (true) {
          if (jj_2_4(1)) {
            Component();
          } else if (jj_2_5(1)) {
            ComponentTemplate();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          if (jj_2_6(1)) {
            ;
          } else {
            break label_5;
          }
        }
        break;
      case SECTION_CONTROLLERS:
        jj_consume_token(SECTION_CONTROLLERS);
          cont = true;
        label_6:
        while (true) {
          if (jj_2_7(1)) {
            SequentialController();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              Controller();
              break;
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          if (jj_2_8(1)) {
            ;
          } else {
            break label_6;
          }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SECTION_DEFINITIONS:
      case SECTION_MAPPINGS:
      case SECTION_SUBCOMPONENTS:
      case SECTION_COMPONENTS:
      case SECTION_CONTROLLERS:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(SECTION_SYSTEM);
      if (!(def && map && sub && comp && cont))
        {if (true) throw new ParseException("Some model sections are missing: "
            + (def ? "#definitions ":"") + (map ? "#mappings ":"")
            + (sub ? "#subcomponents ":"") + (comp ? "#components ":"")
            + (cont ? "#controller ":"")  );}
    System();
    jj_consume_token(0);
  }

  final public void Variable() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    jj_consume_token(KEYWORD_VAR);
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    t2 = jj_consume_token(MATH_EXPR);
    jj_consume_token(EOL);
        model.addVariable(t1.image,t2.image);
  }

  final public void Parameter() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    jj_consume_token(KEYWORD_PARAM);
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    t2 = jj_consume_token(MATH_EXPR);
    jj_consume_token(EOL);
        model.addParameter(t1.image,t2.image);
  }

  final public void Expression() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    jj_consume_token(KEYWORD_EXPR);
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    t2 = jj_consume_token(MATH_EXPR);
    jj_consume_token(EOL);
        model.addExpressionVariable(t1.image,t2.image);
  }

  final public void Guard() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    String name;
    ArrayList<String> parameters = new ArrayList<String>();
    jj_consume_token(KEYWORD_GUARD);
    t = jj_consume_token(IDENTIFIER);
        name = t.image;
    jj_consume_token(LR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
          parameters.add(t.image);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(IDENTIFIER);
              parameters.add(t.image);
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(RR);
    jj_consume_token(ASSIGN);
    t = jj_consume_token(MATH_EXPR);
    jj_consume_token(EOL);
        model.addGuard(name,parameters,t.image);
  }

  final public void Reset() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    ResetList resets = new ResetList();
    String name;
    ArrayList<String> parameters = new ArrayList<String>();
    jj_consume_token(KEYWORD_RESET);
    t = jj_consume_token(IDENTIFIER);
      name = t.image;
    jj_consume_token(LR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
           parameters.add(t.image);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(IDENTIFIER);
               parameters.add(t.image);
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RR);
    jj_consume_token(ASSIGN);
    AtomicReset(resets,parameters);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      jj_consume_token(AND);
      AtomicReset(resets,parameters);
    }
    jj_consume_token(EOL);
        model.addResetDefinition(name,parameters,resets);
  }

  final public void AtomicReset(ResetList reset, ArrayList<String> parameters) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(PRIMED_ASSIGN);
    t2 = jj_consume_token(MATH_EXPR);
        Expression exp = model.parseExpression(t2.image,parameters);
        reset.addReset(t1.image,true,exp);
  }

  final public void GroundAtomicReset(ResetList reset) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(PRIMED_ASSIGN);
    t2 = jj_consume_token(MATH_EXPR);
        if(t2.image.contains("$") || t2.image.contains("#")) {
                        reset.addReset(t1.image,false,t2.image);
                }else {
                        Expression exp = model.parseExpression(t2.image);
                exp.setStrExpr(t2.image);
                reset.addReset(t1.image,false,exp);
                }
  }

  final public void ResetCall(ResetList reset) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    String resetName = null;
    ArrayList<String> params = new ArrayList<String>();
    ResetList rl;
    if (getToken(2).kind == LR) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFIER);
      resetName = t.image;
    jj_consume_token(LR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
          params.add(t.image);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
              params.add(t.image);
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(RR);
        rl = model.instantiateResetDefinition(resetName,params);
        reset.add(rl);
  }

  final public void Function() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    String name;
    ArrayList<String> parameters = new ArrayList<String>();
    jj_consume_token(KEYWORD_FUNCTION);
    t = jj_consume_token(IDENTIFIER);
        name = t.image;
    jj_consume_token(LR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
          parameters.add(t.image);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(IDENTIFIER);
              parameters.add(t.image);
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RR);
    jj_consume_token(ASSIGN);
    t = jj_consume_token(MATH_EXPR);
    jj_consume_token(EOL);
        model.addFunction(name,parameters,t.image);
  }

  final public void Influence() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    jj_consume_token(KEYWORD_INFL);
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(MAPSTO);
    t2 = jj_consume_token(IDENTIFIER);
    jj_consume_token(EOL);
        model.addInfluenceMap(t1.image,t2.image);
  }

  final public void Event() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    String name;
    String guard = "";
    ResetList resets = new ResetList();
    String rate = null;
    boolean stoc = false;
    jj_consume_token(KEYWORD_EVENT);
    t = jj_consume_token(IDENTIFIER);
      name = t.image;
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MATH_EXPR:
      t = jj_consume_token(MATH_EXPR);
          guard = t.image;
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(IMPLY);
    if (jj_2_11(1)) {
      if (jj_2_9(1)) {
        ResetCall(resets);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          GroundAtomicReset(resets);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_12;
        }
        jj_consume_token(AND);
        if (jj_2_10(1)) {
          ResetCall(resets);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            GroundAtomicReset(resets);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      jj_consume_token(AT);
      t = jj_consume_token(MATH_EXPR);
          rate = t.image; stoc = true;
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
        if (stoc)
            model.addEvent(name,guard,resets,rate);
        else
            model.addEvent(name,guard,resets);
  }

  final public void Subcomponent() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t,t1,t2;
    boolean init = false;
    Subcomponent comp;
    boolean res;
    if (getToken(2).kind == SEMICOLON) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
    t2 = jj_consume_token(IDENTIFIER);
        String var = model.getInfluencedVariable(t2.image);
        comp = new Subcomponent(t1.image,t2.image,var);
    jj_consume_token(DEFINE);
    res = Flow(comp);
        if (res && init)
            {if (true) throw new ParseException("init flow already defined for subcomponent " + t1.image);}
        else if (res)
            init = true;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_13;
      }
      jj_consume_token(PLUS);
      res = Flow(comp);
            if (res && init)
                {if (true) throw new ParseException("init flow already defined for subcomponent " + t1.image);}
            else if (res)
                init = true;
    }
    jj_consume_token(EOL);
        if (!init)
            {if (true) throw new ParseException("init flow not defined for subcomponent " + t1.image);}
        model.addSubcomponent(comp);
  }

  final public boolean Flow(Subcomponent comp) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    boolean init = false;
    boolean inc = true;
    ArrayList<String> events = new ArrayList<String>();
    String rate;
    String func;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
          if(!model.isEvent(t.image))
            {if (true) throw new ParseException("Event " + t.image + " in subcomponent " + comp.getName() + " not defined");}
          events.add(t.image);
      break;
    case INIT:
      jj_consume_token(INIT);
          init = true;
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
              if(!model.isEvent(t.image))
                {if (true) throw new ParseException("Event " + t.image + " in subcomponent " + comp.getName() + " not defined");}
              events.add(t.image);
        break;
      case INIT:
        jj_consume_token(INIT);
              init = true;
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
    jj_consume_token(LSQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
          inc = false;
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    t = jj_consume_token(MATH_EXPR_RED);
      rate = t.image;
    jj_consume_token(COMMA);
    t = jj_consume_token(MATH_EXPR);
      func = t.image;
    jj_consume_token(RSQ);
        comp.addFlow(rate,func,inc,init,events);
        {if (true) return init;}
    throw new Error("Missing return statement in function");
  }

  final public void SubcomponentTemplate() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t,t1,t2;
    ArrayList<String> boundParams = new ArrayList<String>();
    boolean init = false;
    SubcomponentTemplate comp;
    boolean res;
    if (getToken(2).kind == LR) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(LR);
    t = jj_consume_token(IDENTIFIER);
      boundParams.add(t.image);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
          if (!boundParams.contains(t.image))
                boundParams.add(t.image);
          else
            {if (true) throw new ParseException("Bound parameter " + t.image + " defined twice for subcomponent " + t1.image);}
    }
    jj_consume_token(RR);
        comp = new SubcomponentTemplate(t1.image,boundParams);
    jj_consume_token(DEFINE);
    res = FlowTemplate(comp,boundParams);
        if (res && init)
            {if (true) throw new ParseException("init flow already defined for subcomponent " + t1.image);}
        else if (res)
            init = true;
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_16;
      }
      jj_consume_token(PLUS);
      res = FlowTemplate(comp,boundParams);
            if (res && init)
                {if (true) throw new ParseException("init flow already defined for subcomponent " + t1.image);}
            else if (res)
                init = true;
    }
    jj_consume_token(EOL);
        if (!init)
            {if (true) throw new ParseException("init flow not defined for subcomponent " + t1.image);}
        model.addSubcomponentTemplate(comp);
  }

  final public boolean FlowTemplate(SubcomponentTemplate comp, ArrayList<String> boundParams) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    boolean init = false;
    boolean inc = true;
    ArrayList<String> events = new ArrayList<String>();
    String rate;
    String func;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
          events.add(t.image);
      break;
    case INIT:
      jj_consume_token(INIT);
          init = true;
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
              events.add(t.image);
        break;
      case INIT:
        jj_consume_token(INIT);
              init = true;
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
    jj_consume_token(LSQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
          inc = false;
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    t = jj_consume_token(MATH_EXPR_RED);
      rate = t.image;
    jj_consume_token(COMMA);
    t = jj_consume_token(MATH_EXPR);
      func = t.image;
    jj_consume_token(RSQ);
        comp.addFlow(model.parseExpression(rate,boundParams),model.parseExpression(func,boundParams),inc,init,events);
        {if (true) return init;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> Sync() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    ArrayList<String> sync = new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LANG:
      jj_consume_token(LANG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
                  sync = null;
          break;
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
                  sync.add(t.image);
          label_18:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[33] = jj_gen;
              break label_18;
            }
            jj_consume_token(COMMA);
            t = jj_consume_token(IDENTIFIER);
                      sync.add(t.image);
          }
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(RANG);
      break;
    case PARALLEL:
      jj_consume_token(PARALLEL);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return sync;}
    throw new Error("Missing return statement in function");
  }

  final public void StarSync() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    jj_consume_token(LANG);
    jj_consume_token(STAR);
    jj_consume_token(RANG);
  }

  final public void Component() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    Component comp;
    if (getToken(2).kind == DEFINE) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(DEFINE);
      comp = new Component(t.image);
    TemplateInstance(comp);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LANG:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_19;
      }
      StarSync();
      TemplateInstance(comp);
    }
    jj_consume_token(EOL);
      model.addComponent(comp);
  }

  final public void ComponentTemplate() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t,t1;
    ArrayList<String> boundParams = new ArrayList<String>();
    ComponentTemplate comp;
    if (getToken(2).kind == LR) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(LR);
    t = jj_consume_token(IDENTIFIER);
      boundParams.add(t.image);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
          if (!boundParams.contains(t.image))
                boundParams.add(t.image);
          else
            {if (true) throw new ParseException("Bound parameter " + t.image + " defined twice for subcomponent " + t1.image);}
    }
    jj_consume_token(RR);
        comp = new ComponentTemplate(t1.image,boundParams);
    jj_consume_token(DEFINE);
    TemplateCall(comp,boundParams);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LANG:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_21;
      }
      StarSync();
      TemplateCall(comp,boundParams);
    }
    jj_consume_token(EOL);
      model.addComponentTemplate(comp);
  }

  final public void TemplateCall(ComponentTemplate comp, ArrayList<String> boundParams) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    ArrayList<String> callingParams = new ArrayList<String>();
    String callingInfluence = null;
    String name;
    boolean template = false;
    boolean subcomponent = false;
    t = jj_consume_token(IDENTIFIER);
      name = t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LR:
      jj_consume_token(LR);
      t = jj_consume_token(IDENTIFIER);
          callingParams.add(t.image);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(IDENTIFIER);
              callingParams.add(t.image);
      }
      jj_consume_token(RR);
          template = true;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        t = jj_consume_token(IDENTIFIER);
              callingInfluence = t.image; subcomponent = true;
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
        if(!template) {
            if ( model.isSubcomponent(name) )
                comp.addSubcomponent(new BindingSubcomponent(model.getSubcomponent(name)));
            else if ( model.isComponent(name) )
                comp.addComponent(new BindingComponent(model.getComponent(name)));
            else {if (true) throw new ParseException("No component or subcomponent with name " + name);}
        } else {
            if (subcomponent) {
                comp.addSubcomponent(new BindingSubcomponent(model.getSubcomponentTemplate(name),boundParams,callingParams,callingInfluence));
            } else {
                comp.addComponent(new BindingComponent(model.getComponentTemplate(name),boundParams,callingParams));
            }
        }
  }

  final public void TemplateInstance(Component comp) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    ArrayList<String> callingParams = new ArrayList<String>();
    String callingInfluence = null;
    String name;
    int population = 1;
    boolean template = false;
    boolean subcomponent = false;
    t = jj_consume_token(IDENTIFIER);
      name = t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LR:
      jj_consume_token(LR);
      t = jj_consume_token(NUMBER);
     population = Integer.parseInt(t.image);
      jj_consume_token(RR);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LR:
      jj_consume_token(LR);
      t = jj_consume_token(IDENTIFIER);
          callingParams.add(t.image);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_23;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(IDENTIFIER);
              callingParams.add(t.image);
      }
      jj_consume_token(RR);
          template = true;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        t = jj_consume_token(IDENTIFIER);
              callingInfluence = t.image; subcomponent = true;
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
        if(!template) {
            if ( model.isSubcomponent(name) )
                comp.addSubcomponent(model.getSubcomponent(name));
            else if ( model.isComponent(name) ) {
                if(population > 1) {
                        ArrayList<Component> copyList = model.getComponent(name).CopyComponent(model,population);
                        for(int i=0;i<copyList.size();i++) {
                                comp.addComponent(copyList.get(i));
                        }
                }else {
                        comp.addComponent(model.getComponent(name));
                }
                //model.getComponent(name).print();
            }
            else {if (true) throw new ParseException("No component or subcomponent with name " + name);}
        } else {
            if (subcomponent) {
                comp.addSubcomponent(model.getSubcomponentTemplate(name).instantiate(callingInfluence,model.getInfluencedVariable(callingInfluence),callingParams,model.getSymbolTable()));
            } else {
                comp.addComponent(model.getComponentTemplate(name).instantiate(callingParams,model.getInfluenceMap(),model.getSymbolTable()));
            }
        }
  }

  final public void SequentialController() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1, t2;
    int num = 1;
    ArrayList<SequentialController> contrList = null;
    SequentialController contr = null;
    if (getToken(7).kind == DOT || getToken(4).kind == DOT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t1 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LR:
      jj_consume_token(LR);
      t2 = jj_consume_token(NUMBER);
     num = Integer.parseInt(t2.image);
      jj_consume_token(RR);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    jj_consume_token(DEFINE);
    //System.out.println(t1.image);
                        if(num > 1) {
          contrList = new ArrayList<SequentialController>();
          if(!t1.image.contains("$")) {
                for(int i=0;i<num;i++) {
                  contr = new SequentialController(t1.image+"_"+i);
                  contrList.add(contr);
            }
                AtomicControllers(contrList, num);
          }else if(t1.image.contains("$$")){
                for(int i=0;i<num;i++) {
                        for(int j=0; j<num; j++) {
                                if(i != j) {
                                        for(int k=0; k<num; k++) {
                                                if(k!=i && k!=j) {
                                                        String suffix = "_"+i+"_"+j+"_"+k;
                                                        String strName = t1.image.replace("$$", suffix);
                                                        contr = new SequentialController(strName);
                                contrList.add(contr);
                                                }
                                        }
                                }
                        }
            }
            AtomicControllersWithRecursiveInteraction(contrList, num);
          }else {
                for(int i=0;i<num;i++) {
                        for(int j=0; j<num; j++) {
                                if(i != j) {
                                        String suffix = "_"+i+"_"+j;
                                        String strName = t1.image.replace("$", suffix);
                                        contr = new SequentialController(strName);
                  contrList.add(contr);
                                }
                        }
            }
                AtomicControllersWithInteraction(contrList, num);
          }

      }else {
          contr = new SequentialController(t1.image);
          AtomicController(contr);
      }
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_24;
      }
      jj_consume_token(PLUS);
                if(num > 1) {
                        if(!t1.image.contains("$")) {
                                AtomicControllers(contrList, num);
                        }else if(t1.image.contains("$$")) {
                                AtomicControllersWithRecursiveInteraction(contrList, num);
                        }else {
                                AtomicControllersWithInteraction(contrList, num);
                        }
                }else {
                        AtomicController(contr);
                }
    }
    jj_consume_token(EOL);
        if(num > 1) {
          for(int i=0;i<contrList.size();i++) {
                model.addSequentialController(contrList.get(i));
        }
        }else {
                model.addSequentialController(contr);
        }
  }

  final public void AtomicController(SequentialController contr) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(DOT);
    t2 = jj_consume_token(IDENTIFIER);
        if (!model.isEvent(t1.image))
            {if (true) throw new ParseException(t1.image + " is not an event");}
        contr.addTransition(t1.image,t2.image);
  }

  final public void AtomicControllers(ArrayList<SequentialController> contrList, int num) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(DOT);
    t2 = jj_consume_token(IDENTIFIER);
        if (!model.isEvent(t1.image))
            {if (true) throw new ParseException(t1.image + " is not an event");}
        Event e = model.getEvent(t1.image);
                for(int i=0;i<num;i++) {
                        e.copyEvent(model, i);
                        contrList.get(i).addTransition(t1.image+"_"+i,t2.image+"_"+i);
                }
  }

  final public void AtomicControllersWithInteraction(ArrayList<SequentialController> contrList, int num) throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t1,t2;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(DOT);
    t2 = jj_consume_token(IDENTIFIER);
                if (!model.isEvent(t1.image))
                    {if (true) {if (true) throw new ParseException(t1.image + " is not an event");}}
    Event e = model.getEvent(t1.image);
    int index = 0;
    for(int i=0;i<num;i++) {
                for(int j=0; j<num; j++) {
                        if(i != j) {
                                String suffix = "_"+i+"_"+j;
                                e.copyEvent(model, i, j);
                    contrList.get(index).addTransition(t1.image+suffix,t2.image+suffix);
                    index++;
                        }
                }
    }
  }

  final public void AtomicControllersWithRecursiveInteraction(ArrayList<SequentialController> contrList, int num) throws ParseException, NumberFormatException, RuntimeException, ParseException {
   Token t1,t2;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(DOT);
    t2 = jj_consume_token(IDENTIFIER);
                if (!model.isEvent(t1.image))
                    {if (true) {if (true) throw new ParseException(t1.image + " is not an event");}}
    Event e = model.getEvent(t1.image);
    int index = 0;
    for(int i=0;i<num;i++) {
                for(int j=0; j<num; j++) {
                        if(i != j) {
                                for(int k=0; k<num; k++) {
                                        if(k!=i && k!=j) {
                                                String suffix = "_"+i+"_"+j+"_"+k;
                                                e.copyRecursiveEvent(model, i, j, k);
                                contrList.get(index).addTransition(t1.image+suffix,t2.image+suffix);
                                index++;
                                        }
                                }
                        }
                }
    }
  }

  final public void Controller() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    SynchronizationNode n;
    Controller contr;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(DEFINE);
    n = Cont();
    jj_consume_token(EOL);
        contr = new Controller(t.image,n);
        model.addController(contr);
  }

  final public SynchronizationNode Cont() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    ArrayList<String> sync = null, newsync;
    SynchronizationNode node,n1,n2;
    boolean  syncSet = false;
    node = BasicCont();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LANG:
      case PARALLEL:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_25;
      }
      newsync = Sync();
      n2 = BasicCont();
          if (!syncSet) {
              sync = newsync;
              syncSet = true;
          } else {
              if (sync == null && newsync != null) {
                  {if (true) throw new ParseException("Unexpected synchronization set. They must be equal in an associative expression");}
              } else  if (sync != null && newsync != null) {
                  if (sync.size() != newsync.size())
                      {if (true) throw new ParseException("Unexpected synchronization set. They must be equal in an associative expression");}
                  if (!sync.containsAll(newsync))
                      {if (true) throw new ParseException("Unexpected synchronization set. They must be equal in an associative expression");}
              }
          }
          n1 = node;
          if (sync != null)
              node = new SynchronizationNode(sync);
          else
              node = new SynchronizationNode();
          node.setLeftChild(n1);
          node.setRightChild(n2);
          n1.setParent(node);
          n2.setParent(node);
    }
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizationNode BasicCont() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t,t2;
    SynchronizationNode node;
    int num = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LR:
        jj_consume_token(LR);
        t2 = jj_consume_token(NUMBER);
                     num = Integer.parseInt(t2.image);
        jj_consume_token(RR);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
                                        if(num == 1) {
                                          if (model.isSequentialController(t.image)) {
                                                node = new SynchronizationNode(model.getSequentialController(t.image));
                                          } else if (model.isController(t.image)) {
                                              node = new SynchronizationNode(model.getController(t.image));
                                          }else {
                                                if (true) {if (true) throw new ParseException("controller or sequential controller " + t.image +  " is not defined");}
                                          }
                                        } else {
                                                if(!t.image.contains("$")) {
                                                        if (model.isSequentialController(t.image+"_"+0)) {
                                                    node = ConstructSyncNode(t.image, num, true);
                                                        } else if (model.isController(t.image+"_"+0)) {
                                                    node = ConstructSyncNode(t.image, num, false);
                                                        } else {if (true) {if (true) throw new ParseException("controller or sequential controller " + t.image + "_index" +  " is not defined");}}
                                                } else if(t.image.contains("$$")){
                                                        node = ConstructSyncNodeWithRecursiveInteration(t.image, num);
                                                } else {
                                                        node = ConstructSyncNodeWithInteration(t.image, num);
                                                }
                                        }
      break;
    case LR:
      jj_consume_token(LR);
      node = Cont();
      jj_consume_token(RR);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizationNode ConstructSyncNode(String contrName, int num, boolean isSeqContr) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    SynchronizationNode parent = null;
    SynchronizationNode leftChild = null;
    SynchronizationNode rightChild = null;
        for(int i=0; i<num; i++) {
                                if(i == 0) {
                                        if(isSeqContr) {
                                                leftChild = new SynchronizationNode(model.getSequentialController(contrName + "_" + i));
                                        }else {
                                                leftChild = new SynchronizationNode(model.getController(contrName + "_" + i));
                                        }
                                }else {
                                        if(isSeqContr) {
                                                rightChild = new SynchronizationNode(model.getSequentialController(contrName + "_" + i));
                                        }else {
                                                rightChild = new SynchronizationNode(model.getController(contrName + "_" + i));
                                        }
                                        parent = new SynchronizationNode();
                                        parent.setLeftChild(leftChild);
                      parent.setRightChild(rightChild);
                      leftChild.setParent(parent);
                      rightChild.setParent(parent);
                      leftChild = parent;
                                }
                }
                {if (true) return parent;}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizationNode ConstructSyncNodeWithInteration(String contrName, int num) throws ParseException, ParseException, NumberFormatException, RuntimeException, ParseException {
                SynchronizationNode parent = null;
                SynchronizationNode leftChild = null;
                SynchronizationNode rightChild = null;
                for(int i=0; i<num; i++) {
                        for(int j=0; j<num; j++) {
                                if(i != j) {
                                        String suffix = "_"+i+"_"+j;
                                String name = contrName.replace("$", suffix);
                                        if(i == 0 && j == 1) {
                                                leftChild = new SynchronizationNode(model.getSequentialController(name));
                                        }else {
                                                rightChild = new SynchronizationNode(model.getSequentialController(name));
                                                parent = new SynchronizationNode();
            parent.setLeftChild(leftChild);
                                                parent.setRightChild(rightChild);
                                          leftChild.setParent(parent);
                                          rightChild.setParent(parent);
                                          leftChild = parent;
                                        }

                }
                        }
     }
     {if (true) return parent;}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizationNode ConstructSyncNodeWithRecursiveInteration(String contrName, int num) throws ParseException, ParseException, NumberFormatException, RuntimeException, ParseException {
                SynchronizationNode parent = null;
                SynchronizationNode leftChild = null;
                SynchronizationNode rightChild = null;
                for(int i=0; i<num; i++) {
                        for(int j=0; j<num; j++) {
                                if(i != j) {
                                        for(int k=0; k<num; k++) {
                                                if(k!=i && k!=j) {
                                                        String suffix = "_"+i+"_"+j+"_"+k;
                                        String name = contrName.replace("$$", suffix);
                                                        if(i == 0 && j == 1 && k == 2) {
                                                                leftChild = new SynchronizationNode(model.getSequentialController(name));
                                                        }else {
                                                                rightChild = new SynchronizationNode(model.getSequentialController(name));
                                                                parent = new SynchronizationNode();
                            parent.setLeftChild(leftChild);
                                                                parent.setRightChild(rightChild);
                                                          leftChild.setParent(parent);
                                                          rightChild.setParent(parent);
                                                          leftChild = parent;
                                                        }
                                                }
                                        }
                }
                        }
     }
     {if (true) return parent;}
    throw new Error("Missing return statement in function");
  }

  final public void System() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    t1 = jj_consume_token(IDENTIFIER);
    StarSync();
    t2 = jj_consume_token(IDENTIFIER);
    jj_consume_token(EOL);
        model.setUncontrolledSystem(t1.image);
        model.setSystemController(t2.image);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_3R_27() {
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind == LR;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_35()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind == SEMICOLON;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_34()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind == DEFINE;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_36()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    return false;
  }

  private boolean jj_3R_37() {
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    jj_lookingAhead = true;
    jj_semLA = getToken(7).kind == DOT || getToken(4).kind == DOT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_38()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind == LR;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_40()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  private boolean jj_3R_29() {
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind == LR;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_37()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    return false;
  }

  private boolean jj_3R_34() {
    return false;
  }

  private boolean jj_3R_36() {
    return false;
  }

  /** Generated Token Manager. */
  public HypeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[52];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x7e00000,0x7e00000,0x18000000,0x18000000,0x0,0x3e000,0x3e000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x20000000,0x0,0x0,0x0,0x20000000,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20000,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x80,0x20000,0x80,0x20000,0x80000,0x80,0x20000,0x80,0x20000,0x400000,0x20000,0x80000,0x20000,0x10,0x400,0x20000,0x80,0x20000,0x100000,0x80,0x400,0x20000,0x80,0x20000,0x100000,0x80,0x21000,0x21000,0xa000,0x2000,0x80,0x2000,0x80,0x0,0x20,0x20,0x80,0x0,0x20,0x20,0x400,0xa000,0x20,0x20020,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[11];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HypeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HypeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HypeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HypeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HypeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HypeParser(HypeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HypeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 52; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
