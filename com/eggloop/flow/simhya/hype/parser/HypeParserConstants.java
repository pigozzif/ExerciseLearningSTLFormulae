/* Generated By:JavaCC: Do not edit this line. HypeParserConstants.java */
package com.eggloop.flow.simhya.hype.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface HypeParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER = 7;
  /** RegularExpression Id. */
  int FLOAT = 8;
  /** RegularExpression Id. */
  int FLOAT_SCIENTIFIC = 9;
  /** RegularExpression Id. */
  int EXPONENT = 10;
  /** RegularExpression Id. */
  int LETTER = 11;
  /** RegularExpression Id. */
  int DIGIT = 12;
  /** RegularExpression Id. */
  int SECTION_DEFINITIONS = 13;
  /** RegularExpression Id. */
  int SECTION_MAPPINGS = 14;
  /** RegularExpression Id. */
  int SECTION_SUBCOMPONENTS = 15;
  /** RegularExpression Id. */
  int SECTION_COMPONENTS = 16;
  /** RegularExpression Id. */
  int SECTION_CONTROLLERS = 17;
  /** RegularExpression Id. */
  int SECTION_SYSTEM = 18;
  /** RegularExpression Id. */
  int KEYWORD_HYPE = 19;
  /** RegularExpression Id. */
  int KEYWORD_MODEL = 20;
  /** RegularExpression Id. */
  int KEYWORD_VAR = 21;
  /** RegularExpression Id. */
  int KEYWORD_PARAM = 22;
  /** RegularExpression Id. */
  int KEYWORD_GUARD = 23;
  /** RegularExpression Id. */
  int KEYWORD_FUNCTION = 24;
  /** RegularExpression Id. */
  int KEYWORD_EXPR = 25;
  /** RegularExpression Id. */
  int KEYWORD_RESET = 26;
  /** RegularExpression Id. */
  int KEYWORD_INFL = 27;
  /** RegularExpression Id. */
  int KEYWORD_EVENT = 28;
  /** RegularExpression Id. */
  int INIT = 29;
  /** RegularExpression Id. */
  int EOL = 30;
  /** RegularExpression Id. */
  int SEMICOLON = 31;
  /** RegularExpression Id. */
  int DEFINE = 32;
  /** RegularExpression Id. */
  int ASSIGN = 33;
  /** RegularExpression Id. */
  int LSQ = 34;
  /** RegularExpression Id. */
  int RSQ = 35;
  /** RegularExpression Id. */
  int AT = 36;
  /** RegularExpression Id. */
  int LR = 37;
  /** RegularExpression Id. */
  int RR = 38;
  /** RegularExpression Id. */
  int COMMA = 39;
  /** RegularExpression Id. */
  int PRIMED_ASSIGN = 40;
  /** RegularExpression Id. */
  int MAPSTO = 41;
  /** RegularExpression Id. */
  int PLUS = 42;
  /** RegularExpression Id. */
  int DOT = 43;
  /** RegularExpression Id. */
  int STAR = 44;
  /** RegularExpression Id. */
  int LANG = 45;
  /** RegularExpression Id. */
  int RANG = 46;
  /** RegularExpression Id. */
  int PARALLEL = 47;
  /** RegularExpression Id. */
  int NUMBER = 48;
  /** RegularExpression Id. */
  int IDENTIFIER = 49;
  /** RegularExpression Id. */
  int IMPLY = 50;
  /** RegularExpression Id. */
  int AND = 51;
  /** RegularExpression Id. */
  int MINUS = 52;
  /** RegularExpression Id. */
  int MATH_EXPR_RED = 53;
  /** RegularExpression Id. */
  int MATH_EXPR = 54;
  /** RegularExpression Id. */
  int SPACE = 55;
  /** RegularExpression Id. */
  int M_AND = 56;
  /** RegularExpression Id. */
  int M_OR = 57;
  /** RegularExpression Id. */
  int SYMBOL = 58;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int RESET = 1;
  /** Lexical state. */
  int ID = 2;
  /** Lexical state. */
  int MATH = 3;
  /** Lexical state. */
  int MATH_RED = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER>",
    "<FLOAT>",
    "<FLOAT_SCIENTIFIC>",
    "<EXPONENT>",
    "<LETTER>",
    "<DIGIT>",
    "\"#definitions\"",
    "\"#mappings\"",
    "\"#subcomponents\"",
    "\"#components\"",
    "\"#controller\"",
    "\"#system\"",
    "\"hype\"",
    "\"model\"",
    "\"var\"",
    "\"param\"",
    "\"guard\"",
    "\"function\"",
    "\"expr\"",
    "\"reset\"",
    "\"infl\"",
    "\"event\"",
    "\"init\"",
    "\";\"",
    "\":\"",
    "\":=\"",
    "\"=\"",
    "\"[\"",
    "\"]\"",
    "\"@\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "<PRIMED_ASSIGN>",
    "\":->\"",
    "\"+\"",
    "\".\"",
    "\"*\"",
    "\"<\"",
    "\">\"",
    "\"||\"",
    "<NUMBER>",
    "<IDENTIFIER>",
    "<IMPLY>",
    "\"&\"",
    "\"-\"",
    "<MATH_EXPR_RED>",
    "<MATH_EXPR>",
    "<SPACE>",
    "\"&&\"",
    "\"||\"",
    "<SYMBOL>",
  };

}
