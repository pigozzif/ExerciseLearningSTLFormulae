
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 16 15:24:50 BST 2012
//----------------------------------------------------

package eggloop.flow.simhya.simhya.modelchecking.parser;

import java_cup.runtime.*;
import eggloop.flow.simhya.simhya.modelchecking.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 16 15:24:50 BST 2012
  */
public class SMCparser extends lr_parser {

    private SymbolFactory symbolFactory;

  /** Default constructor. */
  public SMCparser() {super();}

  /** Constructor which sets the default scanner. */
  public SMCparser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMCparser(Scanner s, SymbolFactory sf) {super(s); symbolFactory = sf;}

  public SymbolFactory getSymbolFactory() {return symbolFactory;}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\005\000\002\002\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\002\000\002\006\007" +
    "\000\002\007\006\000\002\004\004\000\002\004\002\000" +
    "\002\003\007\000\002\003\004\000\002\010\005\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\006\000\002\013\005\000" +
    "\002\013\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\011\004\000\002\011\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\077\000\010\022\005\033\010\034\ufffd\001\002\000" +
    "\010\022\005\033\010\034\ufffd\001\002\000\004\010\065" +
    "\001\002\000\010\022\005\033\010\034\ufffd\001\002\000" +
    "\004\034\051\001\002\000\004\022\013\001\002\000\004" +
    "\002\012\001\002\000\004\002\000\001\002\000\004\007" +
    "\014\001\002\000\012\012\020\020\017\022\021\031\016" +
    "\001\002\000\040\004\uffe4\005\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\021\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\uffe4\001\002\000\040\004" +
    "\uffef\005\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\021\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\001\002\000\012\012\020\020\017\022\021" +
    "\031\016\001\002\000\012\012\020\020\017\022\021\031" +
    "\016\001\002\000\042\004\uffee\005\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\020\040\021\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\001\002" +
    "\000\020\004\024\011\026\012\027\013\031\014\030\015" +
    "\023\016\025\001\002\000\012\012\020\020\017\022\021" +
    "\031\016\001\002\000\010\022\ufffc\033\ufffc\034\ufffc\001" +
    "\002\000\012\012\020\020\017\022\021\031\016\001\002" +
    "\000\012\012\020\020\017\022\021\031\016\001\002\000" +
    "\012\012\020\020\017\022\021\031\016\001\002\000\012" +
    "\012\020\020\017\022\021\031\016\001\002\000\012\012" +
    "\020\020\017\022\021\031\016\001\002\000\040\004\uffe8" +
    "\005\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\025\021\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\001\002\000\040\004\uffe7\005\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\025\021\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\001\002\000" +
    "\040\004\uffe9\005\uffe9\011\uffe9\012\uffe9\013\031\014\030" +
    "\015\023\016\025\021\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\001\002\000\040\004\uffea\005\uffea" +
    "\011\uffea\012\uffea\013\031\014\030\015\023\016\025\021" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\001\002\000\040\004\uffe5\005\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\021\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\001\002\000\040\004" +
    "\uffe6\005\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\025\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\001\002\000\012\012\020\020\017\022\021" +
    "\031\016\001\002\000\004\021\045\001\002\000\022\005" +
    "\043\011\026\012\027\013\031\014\030\015\023\016\025" +
    "\021\uffeb\001\002\000\012\012\020\020\017\022\021\031" +
    "\016\001\002\000\004\021\uffec\001\002\000\040\004\uffed" +
    "\005\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\021\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\001\002\000\040\004\uffe3\005\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\021\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\001\002\000" +
    "\020\011\026\012\027\013\031\014\030\015\023\016\025" +
    "\021\050\001\002\000\040\004\uffe2\005\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\021\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\001\002\000" +
    "\010\002\ufff9\006\052\035\053\001\002\000\004\022\060" +
    "\001\002\000\004\004\057\001\002\000\004\002\001\001" +
    "\002\000\010\002\ufff9\006\052\035\053\001\002\000\004" +
    "\002\ufffa\001\002\000\010\002\ufff7\006\ufff7\035\ufff7\001" +
    "\002\000\004\006\061\001\002\000\004\035\062\001\002" +
    "\000\004\004\063\001\002\000\010\002\ufff8\006\ufff8\035" +
    "\ufff8\001\002\000\004\034\uffff\001\002\000\012\012\020" +
    "\020\017\022\021\031\016\001\002\000\032\011\026\012" +
    "\027\013\031\014\030\015\023\016\025\023\074\024\071" +
    "\025\073\026\077\027\075\030\072\001\002\000\004\004" +
    "\070\001\002\000\010\022\ufffb\033\ufffb\034\ufffb\001\002" +
    "\000\012\012\ufff4\020\ufff4\022\ufff4\031\ufff4\001\002\000" +
    "\012\012\ufff0\020\ufff0\022\ufff0\031\ufff0\001\002\000\012" +
    "\012\ufff3\020\ufff3\022\ufff3\031\ufff3\001\002\000\012\012" +
    "\ufff5\020\ufff5\022\ufff5\031\ufff5\001\002\000\012\012\ufff1" +
    "\020\ufff1\022\ufff1\031\ufff1\001\002\000\012\012\020\020" +
    "\017\022\021\031\016\001\002\000\012\012\ufff2\020\ufff2" +
    "\022\ufff2\031\ufff2\001\002\000\020\004\ufff6\011\026\012" +
    "\027\013\031\014\030\015\023\016\025\001\002\000\004" +
    "\034\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\077\000\012\002\010\005\006\006\005\007\003\001" +
    "\001\000\010\005\100\006\005\007\003\001\001\000\002" +
    "\001\001\000\010\005\063\006\005\007\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\021\012\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\046" +
    "\012\014\001\001\000\006\011\045\012\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\036\012\014" +
    "\001\001\000\002\001\001\000\006\011\035\012\014\001" +
    "\001\000\006\011\034\012\014\001\001\000\006\011\033" +
    "\012\014\001\001\000\006\011\032\012\014\001\001\000" +
    "\006\011\031\012\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\041\012\014\013\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\041\012\014\013\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\054\004\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\054\004" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\066\011\065\012\014" +
    "\001\001\000\004\014\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\077\012\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMCparser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMCparser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMCparser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private SMCenvironment smc = null;

    public SMCparser(Scanner scanner, SMCenvironment smc) {
        symbolFactory = new DefaultSymbolFactory();
        setScanner(scanner);
        this.smc = smc;
    }

    private void check_init() {
        try {
            if (smc == null)
                report_fatal_error("parser not initialized correctly, need to pass a smcExperiment",null);
        } catch (Exception e) {
            throw new RuntimeException("" + e.getMessage() + e );
        }
    }

    void addParam(String name, String def) {
        try {
            check_init();
            if (!smc.addParameter(name,def) )
                report_fatal_error("Cannot add parameter " + name + ": possibly already defined",null);
        } catch (Exception e) {
            throw new RuntimeException("" + e.getMessage() + e );
        }
    }

    void addProp(String name, String def) {
        try {
            check_init();
            if (!smc.addAtomicProposition(name,def) )
                report_fatal_error("Cannot add atomic proposition " + name + ": possibly already defined",null);
        } catch (Exception e) {
            throw new RuntimeException("" + e.getMessage() + e );
        }
    }

    void addMTLformula(String name, String def) {
        try {
            check_init();
            if (!smc.addMTLformula(name,def) )
                report_fatal_error("Cannot add formula " + name + ": possibly already defined",null);
        } catch (Exception e) {
            throw new RuntimeException("" + e.getMessage() + e );
        }
    }

    void addMTLformula(String def) {
        try {
            check_init();
            if (!smc.addMTLformula(def) )
                report_fatal_error("Cannot add formula " + def + ": possibly already defined",null);
        } catch (Exception e) {
            throw new RuntimeException("" + e.getMessage() + e );
        }
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SMCparser$actions {
  private final SMCparser parser;

  /** Constructor */
  CUP$SMCparser$actions(SMCparser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$SMCparser$do_action(
    int                        CUP$SMCparser$act_num,
    lr_parser CUP$SMCparser$parser,
    java.util.Stack            CUP$SMCparser$stack,
    int                        CUP$SMCparser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$SMCparser$result;

      /* select the action based on the action number */
      switch (CUP$SMCparser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= LROUND expr RROUND
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int eright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String e = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		 RESULT = new String( "( " + e + " )" );
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("expr",7, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= MINUS expr
            {
              String RESULT =null;
		int oleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int oright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String o = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		int eleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int eright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String e = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = new String( o + e );
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("expr",7, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= basic_expr
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int eright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String e = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = e;
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("expr",7, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr POW expr
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).left;
		int e1right = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).right;
		String e1 = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).value;
		int oleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int oright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String o = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		int e2left = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int e2right = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = new String( e1 + o + e2 );
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("expr",7, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr MOD expr
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).left;
		int e1right = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).right;
		String e1 = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).value;
		int oleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int oright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String o = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		int e2left = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int e2right = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = new String( e1 + " " + o + " " + e2 );
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("expr",7, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr DIVIDE expr
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).left;
		int e1right = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).right;
		String e1 = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).value;
		int oleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int oright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String o = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		int e2left = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int e2right = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = new String( e1 + " " + o + " " + e2 );
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("expr",7, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr TIMES expr
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).left;
		int e1right = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).right;
		String e1 = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).value;
		int oleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int oright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String o = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		int e2left = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int e2right = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = new String( e1 + " " + o + " " + e2 );
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("expr",7, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MINUS expr
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).left;
		int e1right = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).right;
		String e1 = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).value;
		int oleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int oright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String o = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		int e2left = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int e2right = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = new String( e1 + " " + o + " " + e2 );
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("expr",7, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr PLUS expr
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).left;
		int e1right = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).right;
		String e1 = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).value;
		int oleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int oright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String o = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		int e2left = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int e2right = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = new String( e1 + " " + o + " " + e2 );
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("expr",7, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // args ::= expr
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int eright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String e = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		  RESULT = e;
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("args",9, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // args ::= expr COMMA args
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).left;
		int eright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).right;
		String e = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).value;
		int aleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int aright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String a = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = new String( e + ", " + a );
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("args",9, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // basic_expr ::= IDENTIFIER LROUND args RROUND
            {
              String RESULT =null;
		int idleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).left;
		int idright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).right;
		String id = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).value;
		int aleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int aright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String a = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		 RESULT = new String( id + "(" + a + ")" );
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("basic_expr",8, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // basic_expr ::= IDENTIFIER
            {
              String RESULT =null;
		int idleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int idright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String id = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = id;
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("basic_expr",8, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // basic_expr ::= NUMBER
            {
              String RESULT =null;
		int nleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int nright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String n = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = n;
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("basic_expr",8, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // relop ::= GREATER
            {
              String RESULT =null;
		int idleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int idright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String id = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = id;
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("relop",10, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // relop ::= LESS
            {
              String RESULT =null;
		int idleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int idright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String id = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = id;
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("relop",10, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // relop ::= GREATEREQUAL
            {
              String RESULT =null;
		int idleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int idright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String id = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = id;
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("relop",10, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // relop ::= LESSEQUAL
            {
              String RESULT =null;
		int idleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int idright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String id = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = id;
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("relop",10, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // relop ::= NOTEQUAL
            {
              String RESULT =null;
		int idleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int idright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String id = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = id;
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("relop",10, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // relop ::= EQUAL
            {
              String RESULT =null;
		int idleft = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int idright = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String id = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = id;
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("relop",10, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atomic_constraint ::= expr relop expr
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).left;
		int e1right = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).right;
		String e1 = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)).value;
		int rleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int rright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String r = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		int e2left = ((Symbol)CUP$SMCparser$stack.peek()).left;
		int e2right = ((Symbol)CUP$SMCparser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$SMCparser$stack.peek()).value;
		 RESULT = new String(e1 + " " + r + " " + e2);
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("atomic_constraint",6, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formula ::= FORMULA SEMICOLON
            {
              Object RESULT =null;
		int fleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int fright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String f = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		 parser.addMTLformula(f);
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("formula",1, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formula ::= COLON IDENTIFIER COLON FORMULA SEMICOLON
            {
              Object RESULT =null;
		int idleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).left;
		int idright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).right;
		String id = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).value;
		int fleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int fright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String f = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		 parser.addMTLformula(id,f);
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("formula",1, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-4)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // formula_list ::=
            {
              Object RESULT =null;

              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("formula_list",2, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formula_list ::= formula formula_list
            {
              Object RESULT =null;

              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("formula_list",2, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // prop_decl ::= IDENTIFIER DEFINE atomic_constraint SEMICOLON
            {
              Object RESULT =null;
		int idleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).left;
		int idright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).right;
		String id = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).value;
		int aleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int aright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String a = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		 parser.addProp(id,a);
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("prop_decl",5, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // param_decl ::= PARAM IDENTIFIER ASSIGN expr SEMICOLON
            {
              Object RESULT =null;
		int idleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).left;
		int idright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).right;
		String id = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-3)).value;
		int eleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int eright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		String e = (String)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		 parser.addParam(id,e);
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("param_decl",4, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-4)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_list ::=
            {
              Object RESULT =null;

              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("decl_list",3, ((Symbol)CUP$SMCparser$stack.peek()), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= prop_decl decl_list
            {
              Object RESULT =null;

              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("decl_list",3, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= param_decl decl_list
            {
              Object RESULT =null;

              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("decl_list",3, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= smc EOF
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).left;
		int start_valright = ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)).value;
		RESULT = start_val;
              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-1)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMCparser$parser.done_parsing();
          return CUP$SMCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // smc ::= decl_list MTL formula_list
            {
              Object RESULT =null;

              CUP$SMCparser$result = parser.getSymbolFactory().newSymbol("smc",0, ((Symbol)CUP$SMCparser$stack.elementAt(CUP$SMCparser$top-2)), ((Symbol)CUP$SMCparser$stack.peek()), RESULT);
            }
          return CUP$SMCparser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

