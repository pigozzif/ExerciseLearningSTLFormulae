
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 21 14:15:18 CEST 2013
//----------------------------------------------------

package eggloop.flow.simhya.simhya.modelchecking.mtl.parser;

import java_cup.runtime.*;
import eggloop.flow.simhya.simhya.modelchecking.mtl.*;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 21 14:15:18 CEST 2013
  */
public class MTLparser extends lr_parser {
    SymbolFactory sb = null;

  /** Default constructor. */
  public MTLparser() {super();}

  /** Constructor which sets the default scanner. */
  public MTLparser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MTLparser(Scanner s, SymbolFactory sf) {
      super(s);
      sb = sf;
  }

  public SymbolFactory getSymbolFactory() {
      return sb;
  }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        
        System.err.println("ERROR: " + cur_token.toString());
        String vv = (String)cur_token.value;
        System.err.println("TOKEN VALUE: " + vv);
        super.unrecovered_syntax_error(cur_token);
    }
  
  
  

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\011\000\002\002\004\000\002\002" +
    "\010\000\002\015\003\000\002\015\002\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\004\000\002\003\004\000\002\003" +
    "\005\000\002\003\004\000\002\003\005\000\002\003\004" +
    "\000\002\003\005\000\002\003\011\000\002\003\012\000" +
    "\002\003\011\000\002\003\012\000\002\012\003\000\002" +
    "\012\003\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\007\000\002\004\007\000" +
    "\002\005\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\006" +
    "\000\002\010\005\000\002\010\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\003\000\002\006" +
    "\004\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\026\005\001\002\000\004\002\170\001" +
    "\002\000\014\034\010\035\012\036\013\037\011\040\007" +
    "\001\002\000\004\017\164\001\002\000\004\041\022\001" +
    "\002\000\006\023\016\046\015\001\002\000\006\023\016" +
    "\046\015\001\002\000\006\023\016\046\015\001\002\000" +
    "\006\023\016\046\015\001\002\000\004\017\uffe5\001\002" +
    "\000\032\005\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\027\uffe8\044\uffe8\047\uffe8\050\uffe8" +
    "\001\002\000\032\005\uffe9\015\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\027\uffe9\044\uffe9\047\uffe9" +
    "\050\uffe9\001\002\000\004\017\uffe6\001\002\000\004\017" +
    "\uffe4\001\002\000\004\017\uffe7\001\002\000\004\017\023" +
    "\001\002\000\024\015\025\021\026\023\036\024\024\025" +
    "\030\027\033\044\037\047\032\050\034\001\002\000\034" +
    "\015\025\017\047\021\026\023\036\024\024\025\030\027" +
    "\033\034\052\035\054\040\053\044\037\047\032\050\034" +
    "\001\002\000\024\015\025\021\026\023\036\024\024\025" +
    "\030\027\033\044\037\047\032\050\034\001\002\000\012" +
    "\007\076\015\074\023\077\046\075\001\002\000\012\020" +
    "\070\042\041\043\043\045\042\001\002\000\034\015\025" +
    "\017\047\021\026\023\036\024\024\025\030\027\033\034" +
    "\052\035\054\040\053\044\037\047\032\050\034\001\002" +
    "\000\014\016\ufffb\020\ufffb\042\ufffb\043\ufffb\045\ufffb\001" +
    "\002\000\014\016\ufffa\020\ufffa\042\ufffa\043\ufffa\045\ufffa" +
    "\001\002\000\034\015\025\017\047\021\026\023\036\024" +
    "\024\025\030\027\033\034\052\035\054\040\053\044\037" +
    "\047\032\050\034\001\002\000\014\016\ufff9\020\ufff9\042" +
    "\ufff9\043\ufff9\045\ufff9\001\002\000\014\016\ufffc\020\ufffc" +
    "\042\ufffc\043\ufffc\045\ufffc\001\002\000\014\016\uffde\020" +
    "\uffde\042\uffde\043\uffde\045\uffde\001\002\000\024\015\025" +
    "\021\026\023\036\024\024\025\030\027\033\044\037\047" +
    "\032\050\034\001\002\000\014\016\ufff4\020\ufff4\042\ufff4" +
    "\043\ufff4\045\ufff4\001\002\000\024\015\025\021\026\023" +
    "\036\024\024\025\030\027\033\044\037\047\032\050\034" +
    "\001\002\000\024\015\025\021\026\023\036\024\024\025" +
    "\030\027\033\044\037\047\032\050\034\001\002\000\024" +
    "\015\025\021\026\023\036\024\024\025\030\027\033\044" +
    "\037\047\032\050\034\001\002\000\014\016\ufff6\020\ufff6" +
    "\042\041\043\ufff6\045\ufff6\001\002\000\014\016\ufff5\020" +
    "\ufff5\042\041\043\043\045\ufff5\001\002\000\014\016\ufff7" +
    "\020\ufff7\042\ufff7\043\ufff7\045\ufff7\001\002\000\006\023" +
    "\016\046\015\001\002\000\014\016\uffef\020\uffef\042\041" +
    "\043\043\045\042\001\002\000\024\015\025\021\026\023" +
    "\036\024\024\025\030\027\033\044\037\047\032\050\034" +
    "\001\002\000\006\023\016\046\015\001\002\000\006\023" +
    "\016\046\015\001\002\000\006\023\016\046\015\001\002" +
    "\000\024\015\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\027" +
    "\uffe2\044\uffe2\047\uffe2\050\uffe2\001\002\000\024\015\uffe1" +
    "\021\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\044\uffe1\047" +
    "\uffe1\050\uffe1\001\002\000\024\015\uffe3\021\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\027\uffe3\044\uffe3\047\uffe3\050\uffe3\001" +
    "\002\000\014\016\uffee\020\uffee\042\041\043\043\045\042" +
    "\001\002\000\004\005\062\001\002\000\006\023\016\046" +
    "\015\001\002\000\004\020\064\001\002\000\024\015\uffe0" +
    "\021\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\044\uffe0\047" +
    "\uffe0\050\uffe0\001\002\000\014\016\ufff1\020\ufff1\042\041" +
    "\043\043\045\042\001\002\000\024\015\025\021\026\023" +
    "\036\024\024\025\030\027\033\044\037\047\032\050\034" +
    "\001\002\000\014\016\ufff0\020\ufff0\042\041\043\043\045" +
    "\042\001\002\000\006\002\ufffd\004\071\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\001\001\002\000\040\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\016\uffcc\022\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\001\002\000\012\007\076\015\074\023\077" +
    "\046\075\001\002\000\040\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\016\uffd7\022\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\001\002\000" +
    "\012\007\076\015\074\023\077\046\075\001\002\000\042" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\015\126\016\uffd6\022\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\001\002\000\032\006\111\007" +
    "\101\010\114\011\104\012\105\013\102\032\110\033\103" +
    "\034\106\035\115\036\112\037\107\001\002\000\012\007" +
    "\076\015\074\023\077\046\075\001\002\000\012\007\076" +
    "\015\074\023\077\046\075\001\002\000\012\007\uffdc\015" +
    "\uffdc\023\uffdc\046\uffdc\001\002\000\012\007\076\015\074" +
    "\023\077\046\075\001\002\000\012\007\076\015\074\023" +
    "\077\046\075\001\002\000\012\007\uffdb\015\uffdb\023\uffdb" +
    "\046\uffdb\001\002\000\012\007\uffd8\015\uffd8\023\uffd8\046" +
    "\uffd8\001\002\000\012\007\uffdd\015\uffdd\023\uffdd\046\uffdd" +
    "\001\002\000\012\007\076\015\074\023\077\046\075\001" +
    "\002\000\012\007\uffd9\015\uffd9\023\uffd9\046\uffd9\001\002" +
    "\000\012\007\076\015\074\023\077\046\075\001\002\000" +
    "\012\007\076\015\074\023\077\046\075\001\002\000\012" +
    "\007\uffda\015\uffda\023\uffda\046\uffda\001\002\000\040\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\102" +
    "\016\uffd0\022\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\001\002\000\020\006\111\007\101\010\114" +
    "\011\104\012\105\013\102\022\120\001\002\000\014\016" +
    "\uffdf\020\uffdf\042\uffdf\043\uffdf\045\uffdf\001\002\000\040" +
    "\005\uffd2\006\uffd2\007\uffd2\010\114\011\104\012\105\013" +
    "\102\016\uffd2\022\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\001\002\000\040\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\011\uffce\012\uffce\013\102\016\uffce\022\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\001" +
    "\002\000\040\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\102\016\uffcf\022\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002\000\040\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\016" +
    "\uffcd\022\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\001\002\000\040\005\uffd1\006\uffd1\007\uffd1\010" +
    "\114\011\104\012\105\013\102\016\uffd1\022\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\001\002\000" +
    "\012\007\076\015\074\023\077\046\075\001\002\000\004" +
    "\016\133\001\002\000\022\005\131\006\111\007\101\010" +
    "\114\011\104\012\105\013\102\016\uffd3\001\002\000\012" +
    "\007\076\015\074\023\077\046\075\001\002\000\004\016" +
    "\uffd4\001\002\000\040\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\016\uffd5\022\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000\040" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\016\uffcb\022\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\001\002\000\020\006\111\007\101\010" +
    "\114\011\104\012\105\013\102\016\136\001\002\000\040" +
    "\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\016\uffca\022\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\001\002\000\012\016\140\042\041\043" +
    "\043\045\042\001\002\000\020\016\ufff8\020\ufff8\030\142" +
    "\031\141\042\ufff8\043\ufff8\045\ufff8\001\002\000\014\015" +
    "\153\017\047\034\052\035\054\040\053\001\002\000\014" +
    "\015\144\017\047\034\052\035\054\040\053\001\002\000" +
    "\004\015\147\001\002\000\024\015\025\021\026\023\036" +
    "\024\024\025\030\027\033\044\037\047\032\050\034\001" +
    "\002\000\012\016\146\042\041\043\043\045\042\001\002" +
    "\000\014\016\uffed\020\uffed\042\uffed\043\uffed\045\uffed\001" +
    "\002\000\024\015\025\021\026\023\036\024\024\025\030" +
    "\027\033\044\037\047\032\050\034\001\002\000\012\016" +
    "\151\042\041\043\043\045\042\001\002\000\014\016\uffec" +
    "\020\uffec\042\uffec\043\uffec\045\uffec\001\002\000\004\015" +
    "\156\001\002\000\024\015\025\021\026\023\036\024\024" +
    "\025\030\027\033\044\037\047\032\050\034\001\002\000" +
    "\012\016\155\042\041\043\043\045\042\001\002\000\014" +
    "\016\uffeb\020\uffeb\042\uffeb\043\uffeb\045\uffeb\001\002\000" +
    "\024\015\025\021\026\023\036\024\024\025\030\027\033" +
    "\044\037\047\032\050\034\001\002\000\012\016\160\042" +
    "\041\043\043\045\042\001\002\000\014\016\uffea\020\uffea" +
    "\042\uffea\043\uffea\045\uffea\001\002\000\014\016\ufff3\020" +
    "\ufff3\042\041\043\043\045\042\001\002\000\024\015\025" +
    "\021\026\023\036\024\024\025\030\027\033\044\037\047" +
    "\032\050\034\001\002\000\014\016\ufff2\020\ufff2\042\041" +
    "\043\043\045\042\001\002\000\024\015\025\021\026\023" +
    "\036\024\024\025\030\027\033\044\037\047\032\050\034" +
    "\001\002\000\012\020\166\042\041\043\043\045\042\001" +
    "\002\000\006\002\ufffd\004\071\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\013\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\020\001\001\000\004\012\017\001\001\000" +
    "\004\012\016\001\001\000\004\012\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\026\004\030\005\034\001\001\000\012\003" +
    "\160\004\030\005\034\014\161\001\001\000\010\003\136" +
    "\004\030\005\034\001\001\000\006\006\077\007\072\001" +
    "\001\000\002\001\001\000\012\003\064\004\030\005\034" +
    "\014\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\047\004\030\005\034\014\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\037\004\030\005\034\001\001\000\002\001\001\000\010" +
    "\003\045\004\030\005\034\001\001\000\010\003\044\004" +
    "\030\005\034\001\001\000\010\003\043\004\030\005\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\060\001\001\000\002\001\001\000\010" +
    "\003\057\004\030\005\034\001\001\000\004\012\056\001" +
    "\001\000\004\012\055\001\001\000\004\012\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\066\004\030\005\034\001\001\000\002\001\001" +
    "\000\004\015\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\134\007\072\001\001" +
    "\000\002\001\001\000\006\006\133\007\072\001\001\000" +
    "\002\001\001\000\004\011\112\001\001\000\006\006\124" +
    "\007\072\001\001\000\006\006\123\007\072\001\001\000" +
    "\002\001\001\000\006\006\122\007\072\001\001\000\006" +
    "\006\121\007\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\120\007\072\001\001" +
    "\000\002\001\001\000\006\006\116\007\072\001\001\000" +
    "\006\006\115\007\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\127\007\072\010\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\127" +
    "\007\072\010\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\151\001" +
    "\001\000\004\014\142\001\001\000\002\001\001\000\010" +
    "\003\144\004\030\005\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\147\004\030\005\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\153\004\030\005\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\156\004\030\005\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\162\004\030\005\034\001\001\000\002\001" +
    "\001\000\010\003\164\004\030\005\034\001\001\000\002" +
    "\001\001\000\004\015\166\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MTLparser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MTLparser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MTLparser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}
/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MTLparser$actions {
  private final MTLparser parser;

  /** Constructor */
  CUP$MTLparser$actions(MTLparser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MTLparser$do_action(
    int                        CUP$MTLparser$act_num,
    java_cup.runtime.lr_parser CUP$MTLparser$parser,
    java.util.Stack            CUP$MTLparser$stack,
    int                        CUP$MTLparser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MTLparser$result;

      /* select the action based on the action number */
      switch (CUP$MTLparser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= LROUND expr RROUND 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		 RESULT = new String( "( " + e + " )" ); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= MINUS expr 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = new String( o + e ); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= basic_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = e; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr POW expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = new String( e1 + o + e2 ); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr MOD expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = new String( e1 + " " + o + " " + e2 ); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr DIVIDE expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = new String( e1 + " " + o + " " + e2 ); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr TIMES expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = new String( e1 + " " + o + " " + e2 ); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr MINUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = new String( e1 + " " + o + " " + e2 ); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr PLUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = new String( e1 + " " + o + " " + e2 );  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // args ::= expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = e; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("args",6, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // args ::= expr COMMA args 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = new String( e + ", " + a ); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("args",6, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // basic_expr ::= IDENTIFIER LROUND args RROUND 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		 RESULT = new String( id + "(" + a + ")" ); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("basic_expr",5, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // basic_expr ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = id; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("basic_expr",5, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // basic_expr ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = n; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("basic_expr",5, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relop ::= GREATER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = id; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("relop",7, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relop ::= LESS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = id; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("relop",7, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relop ::= GREATEREQUAL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = id; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("relop",7, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relop ::= LESSEQUAL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = id; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("relop",7, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relop ::= NOTEQUAL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = id; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("relop",7, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relop ::= EQUAL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = id; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("relop",7, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // atomic_proposition ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = id; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("atomic_proposition",3, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // atomic_constraint ::= LBRACE expr relop expr RBRACE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		 RESULT = new String(e1 + " " + r + " " + e2); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("atomic_constraint",2, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-4)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // interval ::= LSQUARE threshold_identifier COMMA threshold_identifier RSQUARE 
            {
              ParametricInterval RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		 ParametricInterval i = new ParametricInterval();
                  i.setLower(t1);
                  i.setUpper(t2);
                  RESULT = i;   
               
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("interval",10, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-4)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // interval ::= EQ threshold_identifier 
            {
              ParametricInterval RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 ParametricInterval i = new ParametricInterval();
                  i.setLower(t);
                  i.setUpper(t);
                  RESULT = i;   
               
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("interval",10, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // interval ::= GREATEREQUAL threshold_identifier 
            {
              ParametricInterval RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 ParametricInterval i = new ParametricInterval();
                  i.setUpperToInfinity();
                  i.setLower(t);
                  RESULT = i;   
               
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("interval",10, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // interval ::= LESSEQUAL threshold_identifier 
            {
              ParametricInterval RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 ParametricInterval i = new ParametricInterval();
                  i.setLowerToZero();
                  i.setUpper(t);
                  RESULT = i;
               
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("interval",10, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // threshold ::= GREATER threshold_identifier 
            {
              Threshold RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new Threshold(ThresholdType.GREATER,t); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("threshold",9, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // threshold ::= LESS threshold_identifier 
            {
              Threshold RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new Threshold(ThresholdType.LESS,t); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("threshold",9, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // threshold ::= GREATEREQUAL threshold_identifier 
            {
              Threshold RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new Threshold(ThresholdType.GREATER_EQUAL,t); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("threshold",9, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // threshold ::= LESSEQUAL threshold_identifier 
            {
              Threshold RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new Threshold(ThresholdType.LESS_EQUAL,t); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("threshold",9, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // threshold_identifier ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = n; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("threshold_identifier",8, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // threshold_identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		 RESULT = id; 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("threshold_identifier",8, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // path_formula ::= LROUND path_formula RROUND WUNTIL interval LROUND path_formula RROUND 
            {
              MTLnode RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-6)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-6)).right;
		MTLnode f1 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).right;
		ParametricInterval i = (ParametricInterval)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		MTLnode f2 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		  RESULT = new MTLweakUntil(i,f1,f2);  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-7)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // path_formula ::= LROUND path_formula RROUND WUNTIL LROUND path_formula RROUND 
            {
              MTLnode RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-5)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-5)).right;
		MTLnode f1 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-5)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		MTLnode f2 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		  RESULT = new MTLweakUntil(f1,f2);  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-6)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // path_formula ::= LROUND path_formula RROUND UNTIL interval LROUND path_formula RROUND 
            {
              MTLnode RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-6)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-6)).right;
		MTLnode f1 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).right;
		ParametricInterval i = (ParametricInterval)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		MTLnode f2 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		  RESULT = new MTLuntil(i,f1,f2);  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-7)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // path_formula ::= LROUND path_formula RROUND UNTIL LROUND path_formula RROUND 
            {
              MTLnode RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-5)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-5)).right;
		MTLnode f1 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-5)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		MTLnode f2 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		  RESULT = new MTLuntil(f1,f2);  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-6)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // path_formula ::= NEXT interval path_formula 
            {
              MTLnode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		ParametricInterval i = (ParametricInterval)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		MTLnode f = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLnext(i,f);  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // path_formula ::= NEXT path_formula 
            {
              MTLnode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		MTLnode f = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLnext(f);  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // path_formula ::= GLOBALLY interval path_formula 
            {
              MTLnode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		ParametricInterval i = (ParametricInterval)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		MTLnode f = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLglobally(i,f);  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // path_formula ::= GLOBALLY path_formula 
            {
              MTLnode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		MTLnode f = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLglobally(f);  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // path_formula ::= EVENTUALLY interval path_formula 
            {
              MTLnode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		ParametricInterval i = (ParametricInterval)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		MTLnode f = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLeventually(i,f);  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // path_formula ::= EVENTUALLY path_formula 
            {
              MTLnode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		MTLnode f = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLeventually(f);  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // path_formula ::= NOT path_formula 
            {
              MTLnode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		MTLnode f = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLnot(f); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // path_formula ::= path_formula IMPLY path_formula 
            {
              MTLnode RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		MTLnode f1 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		MTLnode f2 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLimply(f1,f2); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // path_formula ::= path_formula OR path_formula 
            {
              MTLnode RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		MTLnode f1 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		MTLnode f2 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLor(f1,f2); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // path_formula ::= path_formula AND path_formula 
            {
              MTLnode RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		MTLnode f1 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		MTLnode f2 = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLand(f1,f2); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // path_formula ::= LROUND path_formula RROUND 
            {
              MTLnode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		MTLnode f = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		  RESULT = f;  
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // path_formula ::= FALSE 
            {
              MTLnode RESULT =null;
		  RESULT = new MTLconstantAtom(false); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // path_formula ::= TRUE 
            {
              MTLnode RESULT =null;
		  RESULT = new MTLconstantAtom(true); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // path_formula ::= atomic_constraint 
            {
              MTLnode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLatom(a,true); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // path_formula ::= atomic_proposition 
            {
              MTLnode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MTLparser$stack.peek()).value;
		  RESULT = new MTLatom(a,false); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("path_formula",1, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // semicolon ::= 
            {
              Object RESULT =null;

              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("semicolon",11, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // semicolon ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("semicolon",11, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // state_formula ::= PROB threshold LSQUARE path_formula RSQUARE semicolon 
            {
              MTLformula RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-4)).right;
		Threshold t = (Threshold)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		MTLnode f = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		  RESULT = new MTLformula(t,f); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("state_formula",0, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-5)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= state_formula EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).right;
		MTLformula start_val = (MTLformula)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)).value;
		RESULT = start_val;
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-1)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MTLparser$parser.done_parsing();
          return CUP$MTLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // state_formula ::= PROB EQ QMARK LSQUARE path_formula RSQUARE semicolon 
            {
              MTLformula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).right;
		MTLnode f = (MTLnode)((java_cup.runtime.Symbol) CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-2)).value;
		  RESULT = new MTLformula(f); 
              CUP$MTLparser$result = parser.getSymbolFactory().newSymbol("state_formula",0, ((java_cup.runtime.Symbol)CUP$MTLparser$stack.elementAt(CUP$MTLparser$top-6)), ((java_cup.runtime.Symbol)CUP$MTLparser$stack.peek()), RESULT);
            }
          return CUP$MTLparser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
  
  
  
  
}

